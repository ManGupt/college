From: <Saved by Windows Internet Explorer 8>
Subject: Symbol Tables
Date: Tue, 21 Sep 2010 10:01:39 +0530
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0040_01CB5973.FBF4D9F0"
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.5994

This is a multi-part message in MIME format.

------=_NextPart_000_0040_01CB5973.FBF4D9F0
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.cs.princeton.edu/introcs/44st/

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML lang=3Den><HEAD><TITLE>Symbol Tables</TITLE><LINK rel=3Dicon =
type=3Dimage/x-icon=20
href=3D"http://www.cs.princeton.edu/introcs/favicon.ico"><LINK =
rel=3D"shortcut icon"=20
type=3Dimage/x-icon =
href=3D"http://www.cs.princeton.edu/introcs/favicon.ico"><LINK=20
rel=3Dstylesheet type=3Dtext/css=20
href=3D"http://www.cs.princeton.edu/introcs/introcs.css"><!-- IE HACKS =
--><!--[if IE]>
<STYLE type=3Dtext/css media=3Dscreen>#menu UL LI {
	WIDTH: 100%; FLOAT: left
}
</STYLE>
<![endif]--><!--[if lt IE 7]>=0A=
<style type=3D"text/css" media=3D"screen">=0A=
body {=0A=
behavior: url(/introcs/csshover.htc);=0A=
} =0A=
#menu ul li {float: left; width: 100%;}=0A=
#menu ul li a {height: 1%;} =0A=
=0A=
#menu a, #menu h2 {=0A=
font: bold 0.9em/1.5em arial, helvetica, sans-serif;=0A=
} =0A=
=0A=
</style>=0A=
<![endif]-->
<SCRIPT type=3Dtext/javascript=20
src=3D"http://www.cs.princeton.edu/algs4/media/swfobject.js"></SCRIPT>

<META content=3D"text/html; charset=3Diso-8859-1" =
http-equiv=3DContent-Type>
<META name=3DAUTHOR content=3D"Robert Sedgewick and Kevin Wayne">
<META name=3DKEYWORDS=20
content=3D"Symbol Tables,Java,Programming,interdisciplinary,Computer =
science,cs,intro,introduction,sedgewick,wayne">
<META name=3DDESCRIPTION=20
content=3D"This textbook provides an interdisciplinary approach to the =
CS 1 curriculum. We teach the classic elements of programming, using an =
"=20
commerce.? and engineering, science, from taken applications, specific =
on impact=20
its examining by concept programming each motivate we which in manner =
the is=20
book of feature key A abstraction. data emphasizes that approach=20
objects-in-the-middle?>
<META name=3DTITLE=20
content=3D"Symbol Tables. Introduction to Programming in Java by =
Sedgewick and Wayne">
<META name=3DROBOTS content=3DINDEX,FOLLOW>
<META name=3Dverify-v1 =
content=3DD4o9ikkHbNKapHncCP8ZmiD9Z2DBbrJyaSV0lyce+3w=3D>
<META name=3DGENERATOR content=3D"MSHTML 8.00.6001.18939"></HEAD>
<BODY>
<DIV id=3Dmenu>
<DIV align=3Dcenter><A class=3Dpicture=20
href=3D"http://www.cs.princeton.edu/introcs/home/"><IMG border=3D0=20
alt=3D"Introduction to Programming in Java"=20
src=3D"http://www.cs.princeton.edu/introcs/cover.jpg" width=3D188 =
height=3D233>=20
</A></DIV><!--=0A=
<div align=3D"center"><img src=3D"/introcs/cs.jpg" width=3D188 =
height=3D210 border=3D0=0A=
alt =3D "Computer Science Building, Princeton University"></div>=0A=
-->
<UL>
  <LI><A class=3Dtitle =
href=3D"http://www.cs.princeton.edu/introcs/home">Intro to=20
  Programming</A>=20
  <UL>
    <LI><A=20
    =
href=3D"http://www.cs.princeton.edu/introcs/10elements">1.&nbsp;&nbsp;Ele=
ments=20
    of Programming</A>=20
    <UL>
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/11hello">1.1&nbsp;&nbsp;Your =

      First Program</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/12types">1.2&nbsp;&nbsp;Built=
-in=20
      Types of Data</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/13flow">1.3&nbsp;&nbsp;Condit=
ionals=20
      and Loops</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/14array">1.4&nbsp;&nbsp;Array=
s</A>=20

      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/15inout">1.5&nbsp;&nbsp;Input=
=20
      and Output</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/16pagerank">1.6&nbsp;&nbsp;Ca=
se=20
      Study: PageRank</A> </LI></UL></LI>
    <LI><A=20
    =
href=3D"http://www.cs.princeton.edu/introcs/20functions">2.&nbsp;&nbsp;Fu=
nctions</A>=20

    <UL>
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/21function">2.1&nbsp;&nbsp;St=
atic=20
      Methods</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/22library">2.2&nbsp;&nbsp;Lib=
raries=20
      and Clients</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/23recursion">2.3&nbsp;&nbsp;R=
ecursion</A>=20

      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/24percolation">2.4&nbsp;&nbsp=
;Case=20
      Study: Percolation</A> </LI></UL></LI>
    <LI><A=20
    =
href=3D"http://www.cs.princeton.edu/introcs/30oop">3.&nbsp;&nbsp;OOP</A> =

    <UL>
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/31datatype">3.1&nbsp;&nbsp;Da=
ta=20
      Types</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/32class">3.2&nbsp;&nbsp;Creat=
ing=20
      Data Types</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/33design">3.3&nbsp;&nbsp;Desi=
gning=20
      Data Types</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/34nbody">3.4&nbsp;&nbsp;Case =

      Study: N-Body</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/35purple">3.5&nbsp;&nbsp;Purp=
le=20
      America</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/36inheritance">3.6&nbsp;&nbsp=
;Inheritance</A>=20
      </LI></UL></LI>
    <LI><A=20
    =
href=3D"http://www.cs.princeton.edu/introcs/40algorithms">4.&nbsp;&nbsp;D=
ata=20
    Structures</A>=20
    <UL>
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/41analysis">4.1&nbsp;&nbsp;Pe=
rformance</A>=20

      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/42sort">4.2&nbsp;&nbsp;Sortin=
g=20
      and Searching</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/43stack">4.3&nbsp;&nbsp;Stack=
s=20
      and Queues</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/44st">4.4&nbsp;&nbsp;Symbol=20
      Tables</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/45graph">4.5&nbsp;&nbsp;Case =

      Study: Small World</A> </LI></UL></LI></UL></LI></UL>
<UL>
  <LI><A class=3Dtitle =
href=3D"http://www.cs.princeton.edu/introcs/cs">Intro to=20
  CS</A>=20
  <UL>
    <LI><A=20
    =
href=3D"http://www.cs.princeton.edu/introcs/00prologue">0.&nbsp;&nbsp;Pro=
logue</A>=20

    <UL></UL></LI>
    <LI><A =
href=3D"http://www.cs.princeton.edu/introcs/50machine">5.&nbsp;&nbsp;A=20
    Computing Machine</A>=20
    <UL>
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/51data">5.1&nbsp;&nbsp;Data=20
      Representations</A>=20
      <LI><A =
href=3D"http://www.cs.princeton.edu/introcs/52toy">5.2&nbsp;&nbsp;TOY=20
      Machine</A>=20
      <LI><A =
href=3D"http://www.cs.princeton.edu/introcs/53isa">5.3&nbsp;&nbsp;TOY=20
      Instruction Set</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/54programming">5.4&nbsp;&nbsp=
;TOY=20
      Programming</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/55simulator">5.5&nbsp;&nbsp;T=
OY=20
      Simulator</A> </LI></UL></LI>
    <LI><A=20
    =
href=3D"http://www.cs.princeton.edu/introcs/60circuits">6.&nbsp;&nbsp;Bui=
lding=20
    a Computer</A>=20
    <UL>
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/61combinational">6.1&nbsp;&nb=
sp;Combinational=20
      Circuits</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/62sequential">6.2&nbsp;&nbsp;=
Sequential=20
      Circuits</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/63architecture">6.3&nbsp;&nbs=
p;Building=20
      a TOY</A> </LI></UL></LI>
    <LI><A=20
    =
href=3D"http://www.cs.princeton.edu/introcs/70theory">7.&nbsp;&nbsp;Theor=
y of=20
    Computation</A>=20
    <UL>
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/71language">7.1&nbsp;&nbsp;Fo=
rmal=20
      Languages</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/72regular">7.2&nbsp;&nbsp;Reg=
ular=20
      Expressions</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/73fsa">7.3&nbsp;&nbsp;Finite =

      State Automata</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/74turing">7.4&nbsp;&nbsp;Turi=
ng=20
      Machines</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/75universality">7.5&nbsp;&nbs=
p;Universality</A>=20

      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/76computability">7.6&nbsp;&nb=
sp;Computability</A>=20

      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/77intractability">7.7&nbsp;&n=
bsp;Intractability</A>=20

      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/78crypto">7.8&nbsp;&nbsp;Cryp=
tography</A>=20
      </LI></UL></LI>
    <LI><A=20
    =
href=3D"http://www.cs.princeton.edu/introcs/80systems">8.&nbsp;&nbsp;Syst=
ems</A>=20

    <UL>
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/81library">8.1&nbsp;&nbsp;Lib=
rary=20
      Programming</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/82compiler">8.2&nbsp;&nbsp;Co=
mpilers</A>=20

      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/83os">8.3&nbsp;&nbsp;Operatin=
g=20
      Systems</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/84network">8.4&nbsp;&nbsp;Net=
working</A>=20

      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/85application">8.5&nbsp;&nbsp=
;Applications=20
      Systems</A> </LI></UL></LI>
    <LI><A=20
    =
href=3D"http://www.cs.princeton.edu/introcs/90scientific">9.&nbsp;&nbsp;S=
cientific=20
    Computation</A>=20
    <UL>
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/91float">9.1&nbsp;&nbsp;Float=
ing=20
      Point</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/92symbolic">9.2&nbsp;&nbsp;Sy=
mbolic=20
      Methods</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/93integration">9.3&nbsp;&nbsp=
;Numerical=20
      Integration</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/94diffeq">9.4&nbsp;&nbsp;Diff=
erential=20
      Equations</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/95linear">9.5&nbsp;&nbsp;Line=
ar=20
      Algebra</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/96optimization">9.6&nbsp;&nbs=
p;Optimization</A>=20

      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/97data">9.7&nbsp;&nbsp;Data=20
      Analysis</A>=20
      <LI><A=20
      =
href=3D"http://www.cs.princeton.edu/introcs/98simulation">9.8&nbsp;&nbsp;=
Simulation</A>=20
      </LI></UL></LI></UL></LI></UL>
<UL>
  <LI><A class=3Dtitle href=3D"http://www.cs.princeton.edu/introcs">Web=20
  Resources</A>=20
  <UL>
    <LI><A href=3D"http://www.cs.princeton.edu/introcs/faq">FAQ</A> =
</LI>
    <LI><A =
href=3D"http://www.cs.princeton.edu/introcs/errata">Errata</A> </LI>
    <LI><A href=3D"http://www.cs.princeton.edu/introcs/data">Data =
Sets</A> </LI>
    <LI><A =
href=3D"http://www.cs.princeton.edu/introcs/11appendix">Appendices</A>=20
    <UL>
      <LI><A =
href=3D"http://www.cs.princeton.edu/introcs/11precedence">A. &nbsp;=20
      Operator Precedence</A>=20
      <LI><A href=3D"http://www.cs.princeton.edu/introcs/11style">B. =
&nbsp;=20
      Writing Clear Code</A>=20
      <LI><A href=3D"http://www.cs.princeton.edu/introcs/11gaussian">C. =
&nbsp;=20
      Gaussian Distribution</A>=20
      <LI><A =
href=3D"http://www.cs.princeton.edu/introcs/11cheatsheet">D. &nbsp;=20
      Java Cheatsheet</A>=20
      <LI><A href=3D"http://www.cs.princeton.edu/introcs/11matlab">E. =
&nbsp;=20
      Matlab</A> </LI></UL></LI>
    <LI><A href=3D"http://www.cs.princeton.edu/introcs/lectures">Lecture =

    Slides</A> <!--=0A=
        <ul>=0A=
          <li> <a href =3D "/introcs/lectures/11hello.pdf">1.1 &nbsp; =
Your First Program</a>=0A=
          <li> <a href =3D "/introcs/lectures/12types.pdf">1.2 &nbsp; =
Built-In Types of Data</a>=0A=
          <li> <a href =3D "/introcs/lectures/13flow.pdf">1.3 &nbsp; =
Conditionals and Loops</a>=0A=
          <li> <a href =3D "/introcs/lectures/14array.pdf">1.4 &nbsp; =
Arrays</a>=0A=
          <li> <a href =3D "/introcs/lectures/15inout.pdf">1.5 &nbsp; =
Input and Output</a>=0A=
          <li> <a href =3D "/introcs/lectures/16pagerank.pdf">1.6 &nbsp; =
PageRank</a>=0A=
          <li> <a href =3D "/introcs/lectures/21function.pdf">2.1 &nbsp; =
Functions</a>=0A=
          <li> <a href =3D "/introcs/lectures/22library.pdf">2.2 &nbsp; =
Libraries and Clients</a>=0A=
          <li> <a href =3D "/introcs/lectures/23recursion.pdf">2.3 =
&nbsp; Recursion</a>=0A=
          <li> <a href =3D "/introcs/lectures/24percolation.pdf">2.4 =
&nbsp; Percolation</a>=0A=
          <li> <a href =3D "/introcs/lectures/31datatype.pdf">3.1 &nbsp; =
Data Types</a>=0A=
          <li> <a href =3D "/introcs/lectures/32datatype.pdf">3.2 &nbsp; =
Creating Data Types</a>=0A=
          <li> <a href =3D "/introcs/lectures/33design.pdf">3.3 &nbsp; =
Designing Data Types</a>=0A=
          <li> <a href =3D "/introcs/lectures/34nbody.pdf">3.4 &nbsp; =
N-Body Simulation</a>=0A=
          <li> <a href =3D "/introcs/lectures/41analysis.pdf">4.1 &nbsp; =
Performance</a>=0A=
          <li> <a href =3D "/introcs/lectures/42sort.pdf">4.2 &nbsp; =
Sorting and Searching</a>=0A=
          <li> <a href =3D "/introcs/lectures/43stack.pdf">4.3 &nbsp; =
Stacks and Queues</a>=0A=
          <li> <a href =3D "/introcs/lectures/44st.pdf">4.4 &nbsp; =
Symbol Tables</a>=0A=
          <li> <a href =3D "/introcs/lectures/45graph.pdf">4.5 &nbsp; =
Small World</a>=0A=
        </ul>=0A=
--></LI>
    <LI><A =
href=3D"http://www.cs.princeton.edu/introcs/assignments">Programming=20
    Assignments</A> </LI></UL></LI></UL>
<P><BR>
<FORM method=3Dget name=3Dsearch =
action=3Dhttp://search.cs.princeton.edu/>&nbsp;&nbsp;=20
<INPUT onblur=3D"this.form.q.value=3D'Search booksite...';"=20
style=3D"BACKGROUND: #dddddd; COLOR: #221e16" class=3Dsearch=20
onfocus=3D"this.form.q.value=3D'';" value=3D"Search booksite..." =
maxLength=3D80 size=3D18=20
type=3Dtext name=3Dq>&nbsp;&nbsp; <INPUT value=3DIntroCS type=3Dhidden =
name=3Drestrict>=20
</FORM><BR></P></DIV>
<DIV id=3Dcontent>
<H1>4.4 &nbsp; Symbol Tables</H1>
<P><BR><FONT color=3Dred>This section under major construction. </FONT>
<P>
<H2>Symbol tables.</H2>A <EM>symbol table</EM> is a data type that we =
use to=20
associate <EM>values</EM> with <EM>keys</EM>. Clients can store =
(<EM>put</EM>)=20
an entry into the symbol table by specifying a key-value pair and then =
can=20
retrieve (<EM>get</EM>) the value corresponding to a particular key from =
the=20
symbol table. For example, a university might associate information such =
as a=20
student's name, home address, and grades (the value) with that student's =
social=20
security number (the key), so that each student's records can be =
accessed by=20
specifying a social security number. The same approach might be used by =
a=20
scientist to organize data, by a business to keep track of customer=20
transactions, or by an internet search engine to associate keywords with =
web=20
pages.=20
<P>
<H2>API.</H2>A symbol table is a collection of key-value pairs. We use a =
generic=20
type <TT>Key</TT> for keys and a generic type <TT>Value</TT> for values: =
everry=20
symbol-table entry associates a <TT>Value</TT> with a <TT>Key</TT>. In =
most=20
applications, the keys have some natural ordering, so (as we did with =
sorting)=20
we require the key type <TT>Key</TT> to implement Java's =
<TT>Comparable</TT>=20
interface.=20
<BLOCKQUOTE>
  <TABLE>
    <TBODY>
    <TR>
      <TD><PRE>public class *ST&lt;Key extends Comparable&lt;Key&gt;, =
Value&gt;
             *ST()                  // create a symbol table
       void  put(Key key, Value v)  // put key-value pair into the table
      Value  get(Key key)           // return value paired with key
                                    // or null if no such value
    boolean  contains(Key key)      // is there a value paired with key?
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE>This API reflects several =
design=20
decisions, which we now enumerate:=20
<UL>
  <LI><EM>Comparable keys.</EM> We take advantage of key ordering to =
develop=20
  efficient implementations of <EM>put</EM> and <EM>get</EM>. We also =
assume the=20
  keys do not change their value while in the symbol table. The simplest =
and=20
  most commonly used types of keys, <TT>String</TT> and built-in wrapper =
types=20
  like <TT>Integer</TT> and <TT>Double</TT>, are immutable. </LI>
  <LI><EM>Replace-the-old-value policy.</EM> If when a key-value pair is =

  inserted into the symbol table that already associates another value =
with the=20
  given key, we adopt the convention that the new value replaces the old =
one=20
  (just as with an array assignment statement). </LI>
  <LI><EM>Not found.</EM> The method <TT>get()</TT> returns =
<TT>null</TT> if no=20
  entry with the given key has previously been put into the table. This =
choice=20
  has two implications, discussed next. </LI>
  <LI><EM>Null keys and values.</EM> Clients are not permitted to use=20
  <TT>null</TT> as a key or value. This convention enables us to =
implement=20
  <TT>contains()</TT> as follows:=20
  <BLOCKQUOTE>
    <TABLE>
      <TBODY>
      <TR>
        <TD><PRE>public boolean contains(Key key) {
   return get(key) !=3D null;
}=20
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE></LI>
  <LI><EM>Remove.</EM> We do not include a method for removing keys from =
the=20
  symbol table. Many applications do require such a method, but we leave =

  implementations as an exercise or for more advanced courses in data =
structures=20
  in algorithms. Since clients cannot associate <TT>null</TT> with a =
key, one=20
  simple interface is to take a <EM>put</EM> command with <TT>null</TT> =
as the=20
  value to mean <EM>remove</EM>. </LI>
  <LI><EM>Iterable.</EM> As with most collections, it is best to =
implement=20
  <TT>Iterable</TT> and to provide an appropriate iterator that allows =
clients=20
  to visit the contents of the table. The natural order of iteration is =
in order=20
  of the keys, so we implement <TT>Iterable&lt;Key&gt;</TT> and use =
<EM>get</EM>=20
  to get values, if desired. </LI>
  <LI><EM>Variations.</EM> Numerous other useful operations on symbol =
tables=20
  have been identified, and APIs based on various subsets of them have =
been=20
  widely studied. We will consider several of these at the end of this =
section.=20
  </LI></UL>
<P>
<H2>Symbol table clients.</H2>We consider two prototypical examples.=20
<UL>
  <LI><EM>Dictionary lookup.</EM> The most basic kind of symbol-table =
client=20
  builds a symbol table with successive <EM>put</EM> operations in order =
to be=20
  able to support <EM>get</EM> requests. The following list of familiar =
examples=20
  illustrates the utility of this approach.=20
  <P>
  <BLOCKQUOTE>
    <TABLE border=3D0 cellSpacing=3D1 cellPadding=3D5 width=3D620>
      <TBODY>
      <TR>
        <TH>Application</TH>
        <TH>Action</TH>
        =
<TH>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Key&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TH>
        <TH>Value</TH></TR>
      <TR align=3Dmiddle bgColor=3D#ebebeb>
        <TD>phone book</TD>
        <TD>look up phone number</TD>
        <TD>person's name</TD>
        <TD>phone number</TD></TR>
      <TR align=3Dmiddle bgColor=3D#ebebeb>
        <TD>dictionary</TD>
        <TD>look up word</TD>
        <TD>word</TD>
        <TD>definition</TD></TR>
      <TR align=3Dmiddle bgColor=3D#ebebeb>
        <TD>Internet DNS</TD>
        <TD>Look up website by IP address</TD>
        <TD>website</TD>
        <TD>IP address</TD></TR>
      <TR align=3Dmiddle bgColor=3D#ebebeb>
        <TD>Reverse DNS</TD>
        <TD>Look up IP address by web site</TD>
        <TD>IP address</TD>
        <TD>Website</TD></TR>
      <TR align=3Dmiddle bgColor=3D#ebebeb>
        <TD>genomics</TD>
        <TD>amino acid dictionary</TD>
        <TD>codon</TD>
        <TD>amino acid</TD></TR>
      <TR align=3Dmiddle bgColor=3D#ebebeb>
        <TD>Java compiler</TD>
        <TD>Find properties of variable</TD>
        <TD>Variable name</TD>
        <TD>Value and type</TD></TR>
      <TR align=3Dmiddle bgColor=3D#ebebeb>
        <TD>stock quote</TD>
        <TD>Look up price of stock</TD>
        <TD>stock symbol</TD>
        <TD>price</TD></TR>
      <TR align=3Dmiddle bgColor=3D#ebebeb>
        <TD>file share</TD>
        <TD>find song to download</TD>
        <TD>song name</TD>
        <TD>machine</TD></TR>
      <TR align=3Dmiddle bgColor=3D#ebebeb>
        <TD>file system</TD>
        <TD>find file on hard drive</TD>
        <TD>file name</TD>
        <TD>location on hard =
drive</TD></TR></TR></TBODY></TABLE></BLOCKQUOTE>Program=20
  <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/Lookup.java.html">Lookup=
.java</A>=20
  builds a set of key-value pairs from a file of comma-separated values =
and then=20
  prints out values corresponding to keys read from standard input. The=20
  command-line arguments are the file name and two integers, one =
specifying the=20
  field to serve as the key and the other specifying the field to serve =
as the=20
  value.=20
  <P>Here are some sample data files: <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/amino.csv">amino.csv</A>=
=20
  (codons and amino acids), <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/DJIA.csv">DJIA.csv</A> =
(Dow=20
  Jones Industrial average by date), <A=20
  href=3D"http://www.cs.princeton.edu/introcs/44st/ip.csv">ip.csv</A> =
(hostnames=20
  and IP addresses), <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/morse.csv">morse.csv</A>=
 (Morse=20
  code), <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/elements.csv">elements.c=
sv</A>=20
  (Periodic table of elements), <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/mktsymbols.csv">mktsymbo=
ls.csv</A>=20
  (market symbols and names), <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/toplevel-domain.txt">top=
level-domain.txt</A>=20
  (top-level domain names and their country). </P></LI>
  <LI><EM>Indexing.</EM> Program <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/Index.java.html">Index.j=
ava</A>=20
  is a prototypical example of a symbol table client that uses an =
intermixed=20
  sequence of calls to <TT>get()</TT> and <TT>put()</TT>: it reads in a =
list of=20
  strings from standard input and prints a sorted table of all the =
different=20
  strings along with a list of integers specifying the positions where =
each=20
  string appeared in the input. We have a large amount of data and want =
to know=20
  where certain strings of interest are found. In this case, we seem to =
be=20
  associating multiple values with each key, but we actually associating =
just=20
  one: a queue. Again, this approach is familiar:=20
  <P>
  <BLOCKQUOTE>
    <TABLE border=3D0 cellSpacing=3D1 cellPadding=3D5 width=3D620>
      <TBODY>
      <TR>
        <TH>Application</TH>
        <TH>Action</TH>
        =
<TH>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Key&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TH>
        <TH>Value</TH></TR>
      <TR align=3Dmiddle bgColor=3D#ebebeb>
        <TD>book index</TD>
        <TD>search for terms</TD>
        <TD>term</TD>
        <TD>page numbers</TD></TR>
      <TR align=3Dmiddle bgColor=3D#ebebeb>
        <TD>genomics</TD>
        <TD>find genetic markers</TD>
        <TD>DNA substring</TD>
        <TD>locations</TD></TR>
      <TR align=3Dmiddle bgColor=3D#ebebeb>
        <TD>web search</TD>
        <TD>find information on web</TD>
        <TD>keyword</TD>
        <TD>websites</TD></TR>
      <TR align=3Dmiddle bgColor=3D#ebebeb>
        <TD>business</TD>
        <TD>find transactions</TD>
        <TD>customer name</TD>
        =
<TD>transactions</TD></TR></TR></TBODY></TABLE></BLOCKQUOTE></LI></UL>
<P><BR>
<H2>Elementary implementations.</H2>Symbol-table implementations have =
been=20
heavily studied, Many different algorithms and data structures have been =

invented for this purpose. We first describe two simple approaches.=20
<UL>
  <LI><EM>Binary search implementation.</EM> Program <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/BinarySearchST.java.html=
">BinarySearchST.java</A>=20
  implements a symbol table by maintaining two parallel arrays of keys =
and=20
  values, keeping them in key-sorted order. It uses <EM>binary =
search</EM> for=20
  <EM>get</EM>. To maintain the keys in sorted order, it moves all of =
the larger=20
  elements over for <EM>put</EM>. The <EM>get</EM> operation is =
logarithmic, but=20
  the <EM>put</EM> operation takes linear time per operation. </LI>
  <P>
  <LI><EM>Linked list implementation.</EM> Program <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/LinkedListST.java.html">=
LinkedListST.java</A>=20
  implements a symbol table with an (unordered) linked list. Both =
<EM>put</EM>=20
  and <EM>get</EM> take linear time per operation: to search for a key, =
we need=20
  to traverse its links; to put a key-value pair, we need to search for =
the=20
  given key.=20
  <P><BR>
  <BLOCKQUOTE><IMG alt=3D"linked list symbol-table"=20
    =
src=3D"http://www.cs.princeton.edu/introcs/44st/images/LinkedListST.png">=
=20
  </BLOCKQUOTE></LI></UL>
<P><BR>To develop a symbol-table implementation that is feasible for use =
with=20
clients like <TT>Lookup</TT> and <TT>Index</TT>, we need the flexibility =
of=20
linked lists and the efficiency of binary search. Binary search trees, =
which we=20
consider next, provide just this combination.=20
<P><IMG hspace=3D25 alt=3D"binary search tree" align=3Dright=20
src=3D"http://www.cs.princeton.edu/introcs/44st/images/BST.png">=20
<P>
<H2>Binary search trees.</H2>The <EM>binary tree</EM> is a mathematical=20
abstraction that plays a central role in the efficient organization of=20
information. Like arrays and linked lists, a binary tree is a data type =
that=20
stores a collection of data. Binary trees play an important role in =
computer=20
programming because they strike an efficient balance between flexibility =
and=20
ease of implementation.=20
<P>For symbol-table implementations, we use special type of binary tree =
to=20
organize the data and to provide a basis for efficient implementations =
of the=20
symbol-table <EM>put</EM> operations and <EM>get</EM> requests. A =
<EM>binary=20
search tree</EM> (<EM>BST</EM>) associates <TT>Comparable</TT> keys with =
values,=20
in a structure defined recursively as follows: A BST is either=20
<UL>
  <LI>empty (<TT>null</TT>) or=20
  <LI>a node having a key-value pair and two references to BSTs, a left =
BST with=20
  smaller keys and a right BST with larger keys. </LI></UL>The key type =
must be=20
<TT>Comparable</TT>, but the type of the value is not specified, so a =
BST node=20
can hold any kind of data in addition to the (characteristic) references =
to=20
BSTs. To implement BSTs, we start with a class for the node abstraction, =
which=20
has references to a key, a value, and left and right BSTs:=20
<BLOCKQUOTE>
  <TABLE>
    <TBODY>
    <TR>
      <TD><PRE>private class Node {
   Key   key;
   Value val;
   Node  left, right;

   Node(Key key, Value val) {
      this.key =3D key;
      this.val =3D val;
   }=20

}
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE>This definition is like our =

definition of nodes for linked lists, except that it has <EM>two</EM> =
links, not=20
just one.=20
<UL>
  <LI><EM>Search in a BST.</EM> Suppose that you want to <EM>search</EM> =
for a=20
  node with a given key in a BST (or to <EM>get</EM> a value with a =
given key in=20
  a symbol table). There are two possible outcomes: the search might be=20
  successful (we find the key in the BST; in a symbol-table =
implementation we=20
  return the associated value) or it might be unsuccessful (there is no =
key in=20
  the BST with the given key; in a symbol-table implementation, we =
return=20
  <TT>null</TT>). A recursive algorithm is immediate: Given a BST (a =
reference=20
  to a <TT>Node</TT>), first check whether the tree is empty (the =
reference is=20
  <TT>null</TT>). If so, then terminate the search as unsuccessful (in a =

  symbol-table implementation, return <TT>null</TT>). If the tree is =
non-empty,=20
  check whether the key in the node is equal to the search key. If so, =
then=20
  terminate the search as successful (in a symbol-table implementation, =
return=20
  the value associated with the key). If not, compare the search key =
with the=20
  key in the node. If it is smaller, search (recursively) in the left =
subtree;=20
  if it is greater, search (recursively) in the right subtree. <!--=0A=
<p><br>=0A=
<blockquote>=0A=
<IMG SRC=3D"images/bst-search1.png" alt =3D "successful search in a BST">=0A=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=0A=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=0A=
<IMG SRC=3D"images/bst-search2.png" alt =3D "unsuccessful search in a =
BST">=0A=
</blockquote>=0A=
--><!--=0A=
It is easy to convince yourself that this method behaves as intended, =
based =0A=
upon the invariant that the key is in the BST if and only if it is in =
the current=0A=
subtree. The key property of this recursive method is that we always =
have just one =0A=
node to examine in order to decide what to do next. Moreover, we =
typically examine=0A=
only a small number of the nodes in the tree: whenever we go to one of =
the=0A=
subtrees at a node, we never will examine any of =0A=
the nodes in the other subtree.=0A=
--></LI>
  <LI><EM>Inserting into a BST.</EM> Suppose that you want to insert a =
new node=20
  into a BST (in a symbol-table implementation, <EM>put</EM> a new =
key-value=20
  pair into the data structure). The logic is similar to searching for a =
key,=20
  but the code is trickier: If the BST is empty, we create and return a =
new=20
  <TT>Node</TT> containing the key-value pair; if the search key is less =
than=20
  the key at the root, we set the left link to the result of inserting =
the=20
  key-value pair into the left subtree; if the search key is less, we =
set the=20
  right link to the result of inserting the key-value pair into the =
right=20
  subtree; otherwise if the search key is equal, we overwrite the =
existing value=20
  with the new value. Resetting the link after the recursive call in =
this way is=20
  usually unnecessary, because the link changes only if the subtree is =
empty,=20
  but it is as easy to set the link as to test to avoid setting it. <!--=0A=
<p>=0A=
<blockquote>=0A=
<IMG SRC=3D"images/bst-insert.png" alt =3D "inserting into a BST">=0A=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=0A=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=0A=
=0A=
<IMG SRC=3D"images/bst-construction.png" alt =3D "binary search tree =
construction">=0A=
</blockquote>=0A=
--></LI></UL>Program=20
<A =
href=3D"http://www.cs.princeton.edu/introcs/44st/BST.java.html">BST.java<=
/A> is=20
a symbol-table implementation based on these two recursive algorithms. =
Here is a=20
useful <A =
href=3D"http://www.cs.princeton.edu/introcs/GrowingTree">binary search=20
tree application</A>.=20
<P>
<H2>Performance characteristics of BST.</H2>The running times of =
algorithms on=20
BSTs are dependent on the shape of the trees, and the shape of the trees =
is=20
dependent on the order in which the keys are inserted.=20
<UL>
  <LI><EM>Best case.</EM> In the best case, the tree is perfectly =
balanced (each=20
  <TT>Node</TT> has exactly two non-null children), with lg N nodes =
between the=20
  root and each leaf node. In such a tree, it is easy to see that the =
cost of an=20
  unsuccessful search is logarithmic, because that cost satisfies the =
same=20
  recurrence relation as the cost of binary search (see Section 4.2) so =
that the=20
  cost of every <EM>put</EM> operation and <EM>get</EM> request is =
proportional=20
  to lg N or less.=20
  <P><BR>
  <BLOCKQUOTE><IMG alt=3D"best case binary search tree"=20
    =
src=3D"http://www.cs.princeton.edu/introcs/44st/images/bst-best.png">=20
  </BLOCKQUOTE></LI>
  <LI><EM>Average case.</EM> If we insert random keys, we might expect =
the=20
  search times to be logarithmic as well, because the first element =
becomes the=20
  root of the tree and should divide the keys roughly in half. Applying =
the same=20
  argument to the subtrees, we expect to get about the same result as =
for the=20
  best case. This intuition is indeed validated by careful analysis: a =
classic=20
  mathematical derivation shows that the time required for put and get =
in a tree=20
  constructed from randomly ordered keys is logarithmic. More precisely, =
the=20
  expected number of key comparisons is ~ 2 ln N for a random =
<EM>put</EM> or=20
  <EM>get</EM> in a key built from N randomly ordered keys.=20
  <P><BR>
  <BLOCKQUOTE><IMG alt=3D"average case binary search tree"=20
    =
src=3D"http://www.cs.princeton.edu/introcs/44st/images/bst-average.png"> =

  </BLOCKQUOTE></LI>
  <LI><EM>Worst case.</EM> In the worst case, each node has exactly one =
null=20
  link, so the BST is like a linked list, where <EM>put</EM> operations =
and=20
  <EM>get</EM> requests take linear time. Unfortunately this worst case =
is not=20
  rare in practice - it arises, for example, when we insert the keys in =
order.=20
  Thus, good performance of the basic BST implementation is dependent on =
the=20
  keys being sufficiently similar to random keys that the tree is not =
likely to=20
  contain many long paths.=20
  <P><BR>
  <BLOCKQUOTE><IMG alt=3D"worst case binary search tree"=20
    =
src=3D"http://www.cs.princeton.edu/introcs/44st/images/bst-worst.png">=20
  </BLOCKQUOTE></LI></UL>
<P>Remarkably, there are BST variants that eliminate this worst case and =

guarantee logarithmic performance per operation, by making all trees =
nearly=20
perfectly balanced. One popular variant is known as a <EM>red-black =
tree</EM>.=20
The Java library <A=20
href=3D"http://java.sun.com/j2se/1.5.0/docs/api/java/util/TreeMap.html">j=
ava.util.TreeMap</A>=20
implements a symbol table using this approach. Our symbol-table =
implementation=20
<A =
href=3D"http://www.cs.princeton.edu/introcs/44st/ST.java.html">ST.java</A=
> uses=20
this data structure to implement our symbol-table API. It is remarkably=20
efficient: typically, it only accesses a small number of the nodes in =
the BST=20
(those on the path from the root to the node sought or to the leaf to =
which the=20
new node is attached) and it only creates one new <TT>Node</TT> and adds =
one new=20
link for the <EM>put</EM> operation. Next, we show that put operations =
and get=20
requests take logarithmic time (under certain assumptions).=20
<P>
<H2>Traversing a BST.</H2>Perhaps the most basic tree-processing =
function is=20
known as <EM>tree traversal</EM>: Given a (reference to) a tree, we want =
to=20
systematically process every key-value pair in the tree. For linked =
lists, we=20
accomplish this task by following the single link to move from one node =
to the=20
next. For trees, however, we have decisions to make, because there are =
generally=20
two links to follow. But recursion comes immediately to the rescue. To =
process=20
every key in a BST:=20
<UL>
  <LI>process every key-value pair in the left subtree </LI>
  <LI>process the key-value pair at the root </LI>
  <LI>process every key-value pair in the right subtree </LI></UL>This =
approach=20
not only processes every key pair in the BST, but it does so in =
key-sorted=20
order. For example, the following method prints the key-value pairs in =
the tree=20
rooted at its argument in key-sorted order.=20
<BLOCKQUOTE>
  <TABLE>
    <TBODY>
    <TR>
      <TD><PRE>private static void traverse(Node x) {=20
   if (x =3D=3D null) return;=20
   traverse(x.left);=20
   StdOut.println(x.key + " " + x.val);=20
   traverse(x.right);=20
}=20
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE>This remarkably simple =
method is=20
worthy of careful study. It can be used as a basis for a =
<TT>toString()</TT>=20
implementation for BSTs and also a starting point for developing an =
iterator.=20
<P>
<H2>Extended symbol table operations.</H2>The flexibility of BSTs enable =
the=20
implementation of many useful additional operations beyond those =
dictated by the=20
symbol table API.=20
<UL>
  <LI><EM>Minimum and maximum.</EM> To find the smallest key in a BST, =
follow=20
  left links from the root until reaching null. The last key encountered =
is the=20
  smallest in the BST. The same procedure following right links lead to =
the=20
  largest key. </LI>
  <LI><EM>Size.</EM> To keep track of the number of nodes in a BST, keep =
an=20
  extra instance variable <TT>N</TT> in BST that counts the number of =
nodes in=20
  the tree. Initialize it to 0 and increment it whenever creating a new=20
  <TT>Node</TT>. </LI>
  <LI><EM>Remove.</EM> Many applications demand the ability to remove a=20
  key-value pair with a given key. You can find explict code for =
removing a node=20
  from a BST in a book on algorithms and data structures. An easy lazy =
way to=20
  implement <TT>remove()</TT> relies on the fact that values cannot be=20
  <TT>null</TT>:=20
  <BLOCKQUOTE>
    <TABLE>
      <TBODY>
      <TR>
        <TD><PRE>public void remove(Key key) {
   if (contains(key))
      put(key, null);
}=20
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE>This approach necessitates=20
  periodically cleaning out nodes in the BST with <TT>null</TT> values, =
because=20
  performance will degrade unless the size of the data structure stays=20
  proportional to the number of key-value pairs in the table. </LI>
  <LI><EM>Range search.</EM> With a recursive method like =
<TT>traverse()</TT>,=20
  we can count the number of keys that fall within a given range or =
return all=20
  the keys falling into a given range. </LI>
  <LI><EM>Order statistics.</EM> If we maintain an instance variable in =
each=20
  node having the size of the subtree rooted at each node, we can =
implement a=20
  recursive method that returns the kth largest key in the BST. =
</LI></UL>
<P>
<H2>Set data type.</H2>As a final example, we consider a data type that =
is=20
simpler than a symbol table, still broadly useful, and easy to implement =
with=20
BSTs. A <EM>set</EM> is an (unordered) collection of distinct comparable =
keys,=20
defined by the following API:=20
<P>
<BLOCKQUOTE><IMG alt=3D"set API"=20
  src=3D"http://www.cs.princeton.edu/introcs/44st/images/set-api.png"> =
</BLOCKQUOTE>
<P>A set is a symbol table with no values. We could use BST to implement =
SET,=20
but a direct implementation is simpler, and client code that uses SET is =
simpler=20
and clearer than it would be to use placeholder values and ignore them. =
Program=20
<A =
href=3D"http://www.cs.princeton.edu/introcs/44st/SET.java.html">SET.java<=
/A>=20
implements the set API. Program <A=20
href=3D"http://www.cs.princeton.edu/introcs/44st/DeDup.java.html">DeDup.j=
ava</A>=20
is a SET client that reads in a sequence of strings from standard input =
and=20
prints out the first occurrence of each string (thereby removing =
duplicates).=20
<P>
<H2>Perspective.</H2>The use of binary search trees to implement symbol =
tables=20
is a sterling example of exploiting the tree abstraction, which is =
ubiquitous=20
and familiar. Trees lie at the basis of many scientific topics, and are =
widely=20
used in computer science. We are accustomed to many tree structures in =
everyday=20
life including family trees, sports tournaments, the organization chart =
of a=20
company, the <A =
href=3D"http://www.zo.utexas.edu/faculty/antisense/tree.pdf">tree=20
of life</A>, and parse trees in grammar. Trees also arise in numerous=20
computational applications including function call trees, parse trees, =
and file=20
systems. Many important applications are rooted in science and =
engineering,=20
including phylogenetic trees in computational biology, multidimensional =
trees in=20
computer graphics, minimax game trees in economics, and quad trees in =
molecular=20
dynamics simulations.=20
<P>
<H4>Q + A.</H4>
<OL>
  <LI class=3Dqa value=3D17>Why use immutable symbol table keys?=20
  <LI class=3Dqa value=3D1>If we changed a key while it was in the BST, =
it would=20
  invalidate the ordering restriction.=20
  <LI class=3Dqa value=3D17>Why not use the Java library methods for =
symbol tables?=20
  <LI class=3Dqa value=3D1>Now that you understand how a symbol table =
works, you are=20
  certainly welcome to use the industrial strength versions <A=20
  =
href=3D"http://java.sun.com/j2se/1.5.0/docs/api/java/util/TreeMap.html">j=
ava.util.TreeMap</A>=20
  and <A=20
  =
href=3D"http://java.sun.com/j2se/1.5.0/docs/api/java/util/HashMap.html">j=
ava.util.HashMap</A>.=20
  They follow the same basic API as BST, but they allow null keys and =
use the=20
  names <TT>containsKey()</TT> and <TT>keySet()</TT> instead of=20
  <TT>contains()</TT> and <TT>iterator()</TT>, respectively. They also =
contain=20
  additional methods such as <TT>remove()</TT>, but they do not provide =
any=20
  efficient way to add some of the additional methods that we mentioned, =
such as=20
  order statistics. You can also use <TT>java.util.TreeSet</TT> and=20
  <TT>java.util.HashSet</TT> which implement an API like our SET. =
</LI></OL>
<P><BR>
<H4>Exercises</H4>
<OL>
  <LI>Modify <TT>Lookup</TT> to to make a program <TT>LookupAndPut</TT> =
that=20
  allows <EM>put </EM>operations to be specified on standard input. Use =
the=20
  convention that a plus sign indicates that the next two strings typed =
are the=20
  key-value pair to be inserted.=20
  <LI>Modify <TT>Lookup</TT> to make a program <TT>LookupMultiple</TT> =
that=20
  handles multiple values having the same key by putting the values on a =
queue,=20
  as in <TT>Index</TT>, and then printing them all out on a <EM>get</EM> =

  request, as follows:=20
  <BLOCKQUOTE>
    <TABLE>
      <TBODY>
      <TR>
        <TD><PRE>% java LookupMultiple amino.csv 3 0=20
Leucine=20
TTA TTG CTT CTC CTA CTG=20
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE>
  <LI>Modify <TT>Index</TT> to make a program <TT>IndexByKeyword</TT> =
that takes=20
  a file name from the command line and makes an index from standard =
input using=20
  only the keywords in that file. Note : using the same file for =
indexing and=20
  keywords should give the same result as <TT>Index</TT>.=20
  <LI>Modify <TT>Index</TT> to make a program <TT>IndexLines</TT> that =
considers=20
  only consecutive sequences of letters as keys and uses line numbers =
instead of=20
  word position as the value and to . This functionality is useful for =
programs,=20
  as follows:=20
  <BLOCKQUOTE>
    <TABLE>
      <TBODY>
      <TR>
        <TD><PRE>% java IndexLines 6 0 &lt; Index.java=20
continue 12=20
enqueue 15=20
Integer 4 5 7 8 14=20
parseInt 4 5=20
println 22=20
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE>
  <LI>Develop an implementation <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/BinarySearchST.java.html=
">BinarySearchST.java</A>=20
  of the symbol-table API that maintains parallel arrays of keys and =
values,=20
  keeping them in key-sorted order. Use binary search for get and move =
larger=20
  elements to the right one position for put (use array doubling to keep =
the=20
  array size proportional to the number of key-value pairs in the =
table). Test=20
  your implementation with <TT>Index</TT>, and validate the hypothesis =
that=20
  using such an implementation for <TT>Index</TT> takes time =
proportional to the=20
  product of the number of strings and the number of distinct strings in =
the=20
  input.=20
  <LI>Develop an implementation <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/LinkedListST.java.html">=
LinkedListST.java</A>=20
  of the symbol-table API that maintains a linked list of nodes =
containing keys=20
  and values, keeping them in key-sorted order. Test your implementation =
with=20
  <TT>Index</TT>, and validate the hypothesis that using such an =
implementation=20
  for <TT>Index</TT> takes time proportional to the product of the =
number of=20
  strings and the number of distinct strings in the input.=20
  <LI>Draw all the different BSTs that can represent the key sequence=20
  <BLOCKQUOTE>
    <TABLE>
      <TBODY>
      <TR>
        <TD><PRE>best of it the time was.=20
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE>
  <LI>Draw the BST that results when you insert items with keys=20
  <BLOCKQUOTE>
    <TABLE>
      <TBODY>
      <TR>
        <TD><PRE>E A S Y Q U E S T I O N
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE>
  <P>in that order into an initially empty tree. </P>
  <LI>Suppose we have int values between 1 and 1000 in a BST and search =
for 363.=20
  Which of the following cannot be the sequence of keys examined.=20
  <OL>
    <LI>2 252 401 398 330 363=20
    <LI>399 387 219 266 382 381 278 363=20
    <LI>3 923 220 911 244 898 258 362 363=20
    <LI>4 924 278 347 621 299 392 358 363=20
    <LI>5 925 202 910 245 363 </LI></OL>
  <LI>Suppose that the following 31 keys appear (in some order) in a BST =
of=20
  height 5:=20
  <BLOCKQUOTE>
    <TABLE>
      <TBODY>
      <TR>
        <TD><PRE>10 15 18 21 23 24 30 30 38 41
42 45 50 55 59 60 61 63 71 77
78 83 84 85 86 88 91 92 93 94
98
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE>Draw the top 3 nodes of the =
tree=20
  (the root and its two children).=20
  <LI>Implement <TT>toString()</TT> for BST, using a recursive helper =
method=20
  like <TT>traverse()</TT>. As usual, you can accept quadratic =
performance=20
  because of the cost of string concatenation. Extra credit : Write a=20
  linear-time toString() method for BST.=20
  <LI>True or false. Given a BST, let <EM>x</EM> be a leaf node, and let =

  <EM>p</EM> be its parent. Then either (i) the key of <EM>p</EM> is the =

  smallest key in the BST larger than the key of <EM>x</EM> or (ii) the =
key of=20
  <EM>p</EM> is the largest key in the BST smaller than the key of =
<EM>x</EM>.=20
  <EM>Answer</EM>: true.=20
  <LI>Modify the symbol-table API to use a wrapper type <TT>STentry</TT> =
that=20
  holds the keys and values (with accessor methods key() and value() to =
access=20
  them). Your iterator should return <TT>STentry</TT> objects in =
key-sorted=20
  order. Implement BST and Index as dictated by this API. Discuss the =
pros and=20
  cons of this approach versus the one given in the text.=20
  <LI>Modify the symbol-table API to handle values with duplicate keys =
by having=20
  <TT>get()</TT> return a iterator for the values having a given key. =
Implement=20
  BST and Index as dictated by this API. Discuss the pros and cons of =
this=20
  approach versus the one given in the text.=20
  <LI>Prove that the expected number of key comparisons for a random=20
  <EM>put</EM> or <EM>get</EM> in a BST build from randomly ordered keys =
is ~ 2=20
  ln N.=20
  <LI>Prove that the number of different BSTs that can be built from N =
keys is ~=20

  <LI>Run experiments to validate the claims in the text that the =
<EM>put</EM>=20
  operations and <EM>get</EM> requests for Lookup and Index are =
logarithmic in=20
  the size of the table when using <TT>BST</TT>.=20
  <LI>Modify BST to implement a symbol-table API where keys are =
arbitrary=20
  objects. Use <TT>hashCode()</TT> to convert keys to integers and use =
integer=20
  keys in the BST.=20
  <LI>Modify BST to add methods <TT>min()</TT> and <TT>max()</TT> that =
return=20
  the smallest (largest) key in the table (or <TT>null</TT> if no such =
key=20
  exists).=20
  <LI>Modify BST to add a method <TT>size()</TT> that returns the number =
of=20
  elements in the table. Use the approach of storing within each =
<TT>Node</TT>=20
  the number of nodes in the subtree rooted there.=20
  <LI>Modify BST to add a method <TT>rangeCount()</TT> that takes two=20
  <TT>Key</TT> arguments and returns the number of keys in a BST between =
the two=20
  given keys. Your method should take time proportional to the height of =
the=20
  tree. Hint : First work the previous exercise.=20
  <LI>Modify <TT>SET</TT> to add methods <TT>floor()</TT>, =
<TT>ceil()</TT>, and=20
  <TT>nearest()</TT> that take as argument a <TT>Key</TT> and return the =
largest=20
  (smallest, nearest) element in the set that is no larger than (no =
smaller=20
  than, closest to) the given <TT>Key</TT>.=20
  <LI>Write a ST client that creates a symbol table mapping letter =
grades to=20
  numerical scores, as in the table below, then reads from standard =
input a list=20
  of letter grades and computes their average (GPA).=20
  <BLOCKQUOTE>
    <TABLE>
      <TBODY>
      <TR>
        <TD><PRE> A+   A    A-   B+   B    B-   C+   C    C-   D    F=20
4.33 4.00 3.67 3.33 3.00 2.67 2.33 2.00 1.67 1.00 0.00=20
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE></LI></OL>
<H4>Binary Tree Exercises</H4>This list of exercises is intended to give =
you=20
experience in working with binary trees that are not necessarily BSTs. =
They all=20
assume a Node class with three instance variables: a integer value and =
two Node=20
references.=20
<OL>
  <LI>Implement the following methods for a binary tree that each take =
as=20
  argument a <TT>Node</TT> that is the root of a binary tree.=20
  <UL>
    <LI><TT>size()</TT>: number of nodes in the tree.=20
    <LI><TT>leaves()</TT>: number of nodes whose links are both null=20
    <LI><TT>total()</TT>: sum of the key values in all nodes </LI></UL>
  <P>Your methods should all run in linear time. </P>
  <LI>Implement a linear-time method <TT>height()</TT> that returns the =
maximum=20
  number of nodes on any path from the root to a leaf node (the height =
of the=20
  <TT>null</TT> tree is 0; the height of a 1-node tree is 1).=20
  <LI>A binary tree is <EM>heap-ordered</EM> if the key at the root is =
larger=20
  than the keys in all of its descendants. Implement a linear-time =
method=20
  <TT>heapOrdered()</TT> that returns <TT>true</TT> if the tree is =
heap-ordered,=20
  <TT>false</TT> otherwise.=20
  <LI>A binary tree is <EM>balanced</EM> if both its subtrees are =
balanced and=20
  the height of its two subtrees differ by at most 1. Implement a =
linear-time=20
  method <TT>balanced()</TT> that returns <TT>true</TT> if the tree is =
balanced,=20
  <TT>false</TT> otherwise.=20
  <LI>Two binary trees are <EM>isomorphic</EM> if only their key values =
differ=20
  (they have the same shape). Implement a linear-time static method=20
  <TT>isomorphic()</TT> that takes two tree references as parameters and =
returns=20
  <TT>true</TT> if they refer to isomorphic trees, <TT>false</TT> =
otherwise.=20
  Then implement a linear-time static method <TT>eq()</TT> that takes =
two tree=20
  references as parameters and returns <TT>true</TT> if they refer to =
identical=20
  trees (isomorphic with same key values), <TT>false</TT> otherwise.=20
  <BLOCKQUOTE>
    <TABLE>
      <TBODY>
      <TR>
        <TD><PRE>public static boolean isomorphic(Node x, Node y) {
    if (x =3D=3D null &amp;&amp; y =3D=3D null) return true;   // both =
null
    if (x =3D=3D null || y =3D=3D null) return false;  // exactly one =
null
    return isomorphic(x.left, y.left) &amp;&amp; isomorphic(x.right, =
y.right);
}
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE>
  <LI>Implement a linear-time method <TT>isBST()</TT> that returns =
<TT>true</TT>=20
  if the tree is a BST, <TT>false</TT> otherwise.=20
  <P>Solution : This task is a bit more difficult than it might seem. We =
use an=20
  overloaded recursive method <TT>isBST()</TT> that takes two additional =

  arguments <TT>min</TT> and <TT>max</TT> and returns <TT>true</TT> if =
the tree=20
  is a BST <EM>and</EM> all its values are between <TT>min</TT> and=20
  <TT>max</TT>.=20
  <BLOCKQUOTE>
    <TABLE>
      <TBODY>
      <TR>
        <TD><PRE>public static boolean isBST() {
    return isBST(root, Integer.MIN_VALUE, Integer.MAX_VALUE);
}

private boolean isBST(Node x, int min, int max) {
    if (x =3D=3D null) return true;
    if (x.val &lt; min || x.val &gt; max) return false;
    return isBST(x.left, min, x.val) &amp;&amp; isBST(x.right, x.val, =
max);
}
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE>
  <LI>Write a method <TT>levelOrder()</TT> that prints BST keys in =
<EM>level=20
  order</EM>: First print the root, then the nodes one level below the =
root,=20
  left to right, then the nodes two levels below the root (left to =
right), and=20
  so forth. <EM>Hint</EM> : Use a <TT>Queue&lt;Node&gt;</TT>.=20
  <LI>Compute the value returned by mystery() on some sample binary =
trees, then=20
  formulate an hypothesis about its behavior and prove it.=20
  <BLOCKQUOTE>
    <TABLE>
      <TBODY>
      <TR>
        <TD><PRE>  =20
public int mystery(Node x) {
    if (x =3D=3D null) return 0;
    else return mystery(x.left) + mystery(x.right);
} =20
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE><EM>Answer</EM>: Returns 0 =
for=20
  any binary tree. </LI></OL>
<H4>Creative Exercises</H4>
<OL>
  <LI><B>Spell checking.</B> Write a <TT>SET</TT> client <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/SpellChecker.java.html">=
SpellChecker.java</A>=20
  that takes as command-line argument the name of a file containing a =
dictionary=20
  of words, and then reads strings from standard input and prints out =
any string=20
  that is not in the dictionary. Use the 600,000+ word dictionary <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/datafiles/words.utf-8.txt">wo=
rds.utf-8.txt</A>.=20

  <LI><B>Spell correction.</B> Write an <TT>ST</TT> client=20
  <TT>SpellCorrector</TT> that serves as a filter that replaces commonly =

  misspelled words on standard input with a suggested replacement, =
printing the=20
  result to standard output. Take as command-line argument a file that =
contains=20
  common misspellings and corrections. Use the file <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/misspellings.txt">misspe=
llings.txt</A>,=20
  which contains many common misspellings.=20
  <LI><B>Web filter.</B> Write a <TT>SET</TT> client <TT>WebBlocker</TT> =
that=20
  takes as command-line argument the name of a file containing a list of =
<A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/domain.txt">objectionabl=
e=20
  websites</A> and then reads strings from standard input and prints out =
only=20
  those websites that should not be filtered.=20
  <LI><B>Set operations.</B> Add methods <TT>union()</TT> and=20
  <TT>intersection()</TT> to the set ADT. Do not worry about efficient =
BST=20
  implementations.=20
  <LI><B>Frequency symbol table.</B> Develop a data type <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/FrequencyTable.java.html=
">FrequencyTable.java</A>=20
  that supports the following operations: <TT>click()</TT> and =
<TT>count()</TT>,=20
  both of which take <TT>String</TT> arguments. The data-type value is =
an=20
  integer that keeps track of the number of times the <TT>click()</TT> =
operation=20
  is been called with the given <TT>String</TT> as argument. <TT>The=20
  click()</TT> operation increments the count by one, and the =
<TT>count()</TT>=20
  operation returns the value, possibly 0. Clients of this data type =
might=20
  include a web traffic analyzer, a music player that counts the number =
of times=20
  each song has been played, phone software for counting calls, and so =
forth.=20
  <LI><B>1D range searching.</B> Develop a data type that supports the =
following=20
  operations: insert a date, search for a date, and count the number of =
dates in=20
  the data structure that lie in a particular interval. Use either =
Java's <A=20
  =
href=3D"http://java.sun.com/j2se/1.5.0/docs/api/java/util/Date.html">java=
.util.Date</A>=20
  data type or <A=20
  =
href=3D"http://java.sun.com/j2se/1.5.0/docs/api/java/util/GregorianCalend=
ar.html">java.util.GregorianCalendar</A>=20
  data type to represent the date.=20
  <LI><B>Non-overlapping interval search.</B> Given a list of =
non-overlapping=20
  intervals of integers, write a function that takes an integer argument =
and=20
  determines in which if any interval that values lies, e.g., if the =
intervals=20
  are 1643-2033, 5532-7643, 8999-10332, 5666653-5669321, then the query =
point=20
  9122 lies in the third interval and 8122 lies in no interval.=20
  <LI><B>IP lookup by country.</B> Write a <TT>BST</TT> client that uses =
the=20
  data file the data file <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/datafiles/ip-to-country.csv">=
ip-to-country.csv</A>=20
  to determine what country a given IP address is coming from. The data =
file has=20
  five fields (beginning of IP address range, ending of IP address =
range, two=20
  character country code, three character country code, and country =
name. The IP=20
  addresses are non-overlapping. Such a database tool can be used for: =
credit=20
  card fraud detection, spam filtering, auto-selection of language on a =
web=20
  site, and web server log analysis.=20
  <P>See also <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/datafiles/GeoIPCountryWhois.c=
sv">GeoIPCountryWhois.csv</A>,=20
  <A href=3D"http://ip-to-country.directi.com/">the IP-to-country =
website</A> or=20
  <A href=3D"http://www.maxmind.com/app/geoip_country">MaxMind =
GeoIP</A>. </P>
  <LI><B>Inverted index of web.</B> Given a list of web pages, create a =
symbol=20
  table of words contained in the web pages. Associate with each word a =
list of=20
  web pages in which that word appears. Write a program that reads in a =
list of=20
  web pages, creates the symbol table, and support single word queries =
by=20
  returning the list of web pages in which that query word appears.=20
  <LI><B>Inverted index of web.</B> Extend the previous exercise so that =
it=20
  supports multi-word queries. In this case, output the list of web =
pages that=20
  contain at least one occurrence of each of the query words.=20
  <LI><B>Multiple word search.</B> Write a program that takes k words =
from the=20
  command-line, reads in sequence of words from standard input, and =
identifies=20
  the smallest subsequence of text that contains all of the k words (not =

  necessarily in the same order). Don???t consider partial words.=20
  <P><EM>Hint</EM>: for each index i, find the smallest subsequence [i, =
j] that=20
  contains the k query words. Keep a count of the number of times each =
of the k=20
  query words appear. Given [i, j], compute [i+1, j'] by decrementing =
the=20
  counter for word i. Then gradually increase j until the subsequence =
contains=20
  at least one copy of each of the k words. </P>
  <LI><B>Repetition draw in chess.</B> In the game of chess, if a board =
position=20
  is repeated three times with the same side to move, the side to move =
can=20
  declare a draw. Describe how you could test this condition using a =
computer=20
  program.=20
  <LI><B>Registrar scheduling.</B> The Registrar at a prominent =
northeastern=20
  Uni- versity recently scheduled an instructor to teach two different =
classes=20
  at the same exact time. Help the Registrar prevent future mistakes by=20
  describing a method to check for such conflicts. For simplicity, =
assume all=20
  classes run for 50 minutes starting at 9, 10, 11, 1, 2, or 3.=20
  <LI><B>Entropy.</B> We define the <EM>relative entropy</EM> of a text =
corpus=20
  with N words, k of which are distinct as=20
  <P>
  <BLOCKQUOTE>E =3D 1 / (N lg N) (p<SUB>1</SUB> lg(k / p<SUB>1</SUB>) + =
... +=20
    p<SUB>k</SUB> lg(k / p<SUB>k</SUB>) ) </BLOCKQUOTE>where =
p<SUB>i</SUB> is the=20
  fraction of times that word i appears. Write a program that reads in a =
text=20
  corpus and prints out the relative entropy. Convert all letters to =
lowercase=20
  and treat punctuation marks as whitespace.=20
  <LI><B>Order statistics.</B> Add to BST a method <TT>select()</TT> =
that takes=20
  an integer argument k and returns the kth largest key in the BST. =
Assume that=20
  the subtree sizes are maintained in each node. The running time should =
be=20
  proportional to the height of the tree.=20
  <LI><B>Delete ith element.</B> Create an ADT that supports the =
following=20
  operations: <TT>isEmpty()</TT>, <TT>insert()</TT>, and <TT>delete(int =
i)</TT>,=20
  where the deletion operation deletes and returns the ith least =
recently added=20
  object. Use a BST with a counter that records the total number of =
elements n=20
  inserted and give the nth element inserted the key n. Each BST node =
should=20
  also maintain the total number of nodes in the subtree rooted at that =
node. To=20
  find the ith least recently added item, search for the ith smallest =
element in=20
  the BST.=20
  <LI><B>Mutable string.</B> Create an ADT that supports the following=20
  operations on a string: <TT>get(int i)</TT>, <TT>insert(int i, char =
c)</TT>,=20
  and <TT>delete(int i)</TT>, where <TT>get</TT> returns the ith =
character of=20
  the string, <TT>insert()</TT> inserts the character c and makes it the =
ith=20
  character, and <TT>delete()</TT> deletes the ith character. Use a BST =
to=20
  implement operationis in logarithmic time.=20
  <LI><B>Sparse vectors and matrices.</B> An N-by-N matrix is sparse if =
its=20
  number of nonzeros is proportional to N (or less). Goal: represent =
sparse=20
  matrix with space proportional to N by only implicitly storing the =
zero=20
  entries. Add two sparse vectors/matrices in time proportional to the =
number of=20
  nonzeros. Design ADTs <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/SparseVector.java.html">=
SparseVector.java</A>=20
  and <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/SparseMatrix.java.html">=
SparseMatrix.java</A>=20
  that support the following APIs.=20
  <BLOCKQUOTE>
    <TABLE>
      <TBODY>
      <TR>
        <TD><PRE>public class SparseVector
   public SparseVector(int N)                 // 0-vector of length N
   public void (put i, double value)          // a[i] =3D val
   public double get(int i)                   // return a[i]
   public double dot(SparseVector b)          // vector dot product
   public SparseVector plus(SparseVector b)   // vector addition

public class SparseMatrix
   public SparseMatrix(int N)
   public void put(int i, int j, double val)    // a[i][j] =3D val
   public double get(int i, int j)              // return a[i][j]
   public SparseMatrix times(SparseMatrix b)    // matrix product
   public SparseMatrix plus(SparseMatrix b)     // matrix addition
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE>
  <LI><B>Expression parser.</B> Write a program to parse and evaluate=20
  expressions of the following form. Store the variable names in a =
symbol table.=20

  <BLOCKQUOTE>
    <TABLE>
      <TBODY>
      <TR>
        <TD><PRE>A =3D 5
B =3D 10
C =3D A + B
D =3D C * C
Result: A =3D 5,  B =3D 10,  C =3D 15, D =3D 225
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE>Consider adding more =
complicated=20
  expressions, e.g., E =3D 7 * (B + C * D).=20
  <LI><B>Actor and actress aliases.</B> Given this 10MB file containing =
a <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/datafiles/aka-names.list">lis=
t of=20
  actors (with canonical name) and their aliases</A>, write a program =
that reads=20
  in the name of an actor from standard input and prints out his =
canonical name.=20

  <LI><B>Database joins.</B> Given two tables, an <A=20
  href=3D"http://en.wikipedia.org/wiki/Join_(SQL)">inner join</A> finds =
the=20
  "intersection" between the two tables.=20
  <BLOCKQUOTE>
    <TABLE>
      <TBODY>
      <TR>
        <TD><PRE>Name      Dept ID       Dept     Dept ID
-----------------       ----------------
Smith       34          Sales        31
Jones       33          Engineering  33
Robinson    34          Clerical     34
Jasper      36          Marketing    35
Steinberg   33
Rafferty    31
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE>The innner join on =
department ID=20
  is as follows.=20
  <BLOCKQUOTE>
    <TABLE>
      <TBODY>
      <TR>
        <TD><PRE>Name      Dept ID   Dept
-------------------------------
Smith       34      Clerical
Jones       33      Engineering
Robinson    34      Clerical
Steinberg   33      Engineering
Rafferty    31      Sales
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE>
  <P></P>
  <LI><B>Molecular weight calculator.</B> Write a program <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/MolecularWeight.java.htm=
l">MolecularWeight.java</A>=20
  that reads in a list of <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/elements.csv">elements =
and=20
  their molecular weights</A>, and then prompts the user for the =
molecular=20
  description of a chemical compound (e.g., CO.2 or Na.Cl or N.H4.N.O3 =
=3D=20
  ammonium nitrate) and prints out its molecular weight. </LI></OL>
<H4>Web Exercises</H4>
<OL>
  <P>
  <LI><A href=3D"http://www.kazusa.or.jp/codon/">Codon usage table</A>. =
Describe=20
  how to hash codons (3 consecutive nucleotides) to an integer between 0 =
and 63.=20
  Print out summary statistics for each codon, e.g.,=20
  <BLOCKQUOTE>
    <TABLE>
      <TBODY>
      <TR>
        <TD><PRE>
UUU 13.2(   724)  UCU 19.6(  1079)  UAU 16.5(   909)  UGU 12.4(   680)
UUC 23.5(  1290)  UCC 10.6(   583)  UAC 14.7(   808)  UGC  8.0(   438)
UUA  5.8(   317)  UCA 16.1(   884)  UAA  0.7(    38)  UGA  0.3(    15)
UUG 17.6(   965)  UCG 11.8(   648)  UAG  0.2(    13)  UGG  9.5(   522)

CUU 21.2(  1166)  CCU 10.4(   571)  CAU 13.3(   733)  CGU 10.5(   578)
CUC 13.5(   739)  CCC  4.9(   267)  CAC  8.2(   448)  CGC  4.2(   233)
CUA  6.5(   357)  CCA 41.0(  2251)  CAA 24.9(  1370)  CGA 10.7(   588)
CUG 10.7(   590)  CCG 10.1(   553)  CAG 11.4(   625)  CGG  3.7(   201)

AUU 27.1(  1491)  ACU 25.6(  1405)  AAU 27.2(  1495)  AGU 11.9(   653)
AUC 23.3(  1279)  ACC 13.3(   728)  AAC 21.0(  1151)  AGC  6.8(   374)
AUA  5.9(   324)  ACA 17.1(   940)  AAA 32.7(  1794)  AGA 14.2(   782)
AUG 22.3(  1223)  ACG  9.2(   505)  AAG 23.9(  1311)  AGG  2.8(   156)

GUU 25.7(  1412)  GCU 24.2(  1328)  GAU 49.4(  2714)  GGU 11.8(   650)
GUC 15.3(   843)  GCC 12.6(   691)  GAC 22.1(  1212)  GGC  7.0(   384)
GUA  8.7(   478)  GCA 16.8(   922)  GAA 39.8(  2185)  GGA 47.2(  2592)
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE>
  <LI><B>Functions on trees.</B> Write a function <TT>count()</TT> that =
takes a=20
  <TT>Node</TT> <TT>x</TT> as an argument returns the number of nodes in =
the=20
  subtree rooted at <TT>x</TT> (including <TT>x</TT>). The number of =
elements in=20
  an empty binary tree is 0 (base case), and the number of elements in a =

  non-empty binary tree is equal to one plus the number of elements in =
the left=20
  subtree plus the number of elements in the right subtree.=20
  <BLOCKQUOTE>
    <TABLE>
      <TBODY>
      <TR>
        <TD><PRE>public static int count(TwoNode x) {
   if (x =3D=3D null) return 0;
   return 1 + count(x.left) + count(x.right);
}
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE>
  <LI><B>Random element.</B> Add a symbol table function <TT>random</TT> =
to a=20
  BST that returns a random element. Assume that the nodes of your BST =
have=20
  integer size fields that contain the number of elements in the subtree =
rooted=20
  at that node. The running time should be proportional to the length of =
the=20
  path from the root to the node returned.=20
  <LI><B>Markov language model.</B> Create a data type that supports the =

  following two operations: <TT>add</TT> and <TT>random</TT>. The =
<TT>add</TT>=20
  method should insert a new item into the data structure if it doesn't =
yet=20
  exists; if it already exists, it should increase its frequency count =
by one.=20
  The <TT>random</TT> method should return an element at random, where =
the=20
  probabilities are weighted by the frequency of each element.=20
  <LI><B>Queue with no duplicates.</B> Create a data type that is a =
queue,=20
  except that an element may only appear on the queue at most once at =
any given=20
  time. Ignore requests to insert an item if it is already on the queue. =

  <LI><B>Bayesian spam filter.</B> Follow the ideas in <A=20
  href=3D"http://www.paulgraham.com/antispam.html">A Plan for Spam</A>. =
Here is a=20
  place to get <A=20
  href=3D"http://nexp.cs.pdx.edu/~psam/cgi-bin/view/PSAM/WebHome">test =
data</A>.=20
  <LI><B>Symbol table with random access.</B> Create a data type that =
supports=20
  inserting a key-value pair, searching for a key and returning the =
associated=20
  value, and deleting and returning a random value. <EM>Hint</EM>: =
combine a=20
  symbol table and a randomized queue.=20
  <LI><B>Random phone numbers.</B> Write a program that takes a comand =
line=20
  input N and prints N random phone numbers of the form (xxx) xxx-xxxx. =
Use a=20
  symbol table to avoid choosing the same number more than once. Use =
this <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/datafiles/phone.na.txt">list =
of area=20
  codes</A> to avoid printing out bogus area codes.=20
  <LI><B>Unique substrings of length L.</B> Write a program that reads =
in text=20
  from standard input and calculate the number of unique substrings of =
length L=20
  that it contains. For example, if the input is <TT>cgcgggcgcg</TT> =
then there=20
  are 5 unique substrings of length 3: <TT>cgc</TT>, <TT>cgg</TT>, =
<TT>gcg</TT>,=20
  <TT>ggc</TT>, and <TT>ggg</TT>. Applications to data compression.=20
  <EM>Hint</EM>: use the string method <TT>substring(i, i + L)</TT> to =
extract=20
  ith substring and insert into a symbol table. Test it out on the first =
<A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/datafiles/pi-1million.txt">mi=
llion=20
  digits of &#960;</A>. or <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/datafiles/pi-10million.txt">1=
0=20
  million digits of &#960;</A>.=20
  <LI><B>The great tree-list recursion problem</B>. A binary search tree =
and a=20
  circular doubly linked list are conceptually built from the same type =
of nodes=20
  - a data field and two references to other nodes. Given a binary =
search tree,=20
  rearrange the references so that it becomes a circular doubly-linked =
list (in=20
  sorted order). Nick Parlante describes this as <A=20
  href=3D"http://cslibrary.stanford.edu/109/TreeListRecursion.html">one =
of the=20
  neatest recursive pointer problems ever devised</A>. <EM>Hint</EM>: =
create a=20
  circularly linked list A from the left subtree, a circularly linked =
list B=20
  from the right subtree, and make the root a one node circularly linked =
list.=20
  Them merge the three lists.=20
  <LI><B>Optimal BST.</B>=20
  <LI><B>Password checker.</B> Write a program that reads in a string =
from the=20
  command line and a dictionary of words from standard input, and checks =
whether=20
  it is a "good" password. Here, assume "good" means that it (i) is at =
least 8=20
  characters long, (ii) is not a word in the dictionary, (iii) is not a =
word in=20
  the dictionary followed by a digit 0-9 (e.g., hello5), (iv) is not two =
words=20
  separated by a digit (e.g., hello2world)=20
  <LI><B>Reverse password checker.</B> Modify the previous problem so =
that (ii)=20
  - (v) are also satisfied for reverses of words in the dictionary =
(e.g., olleh=20
  and olleh2world). <EM>Simple solution</EM>: insert each word and its =
reverse=20
  into the symbol table.=20
  <LI><B>Cryptograms.</B> Write a program to read in a cryptogram and =
solve it.=20
  A cryptogram is ancient form of encryption known as a substitution =
cipher in=20
  which each letter in the original message is replaced by another =
letter.=20
  Assuming we use only lowercase letters, there are 26! possibilities, =
and your=20
  goal is to find one that results in a message where each word is a =
valid word=20
  in the dictionary. Use <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/27recursion/Permutations.java=
.html">Permutations.java</A>=20
  and backtracking.=20
  <P><A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/FrequencyCounter.java.ht=
ml">FrequencyCounter.java</A>=20
  is a prototypical example of using a symbol table with an intermixed =
sequence=20
  of calls to <TT>get()</TT> and <TT>put()</TT>: it reads in a list of =
strings=20
  from standard input and <EM>counts</EM> the number of times each =
string=20
  appears. </P>
  <LI><B>Unordered array symbol table.</B> Write a program <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/SequentialSearchST.java.=
html">SequentialSearchST.java</A>=20
  that implements a symbol-table using (unordered) parallel arrays.=20
  <LI><B>Exception filter.</B> The client program <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/ExceptionFilter.java.htm=
l">ExceptionFilter.java</A>=20
  reads in a sequence of strings from a whitelist file specified as a=20
  command-line argument, then it prints out all words from standard =
input not in=20
  the whitelist.=20
  <P>
  <H2>Inverted index of web.</H2>Given a list of web pages, create a =
symbol=20
  table of words contained in the web pages. Associate with each word a =
set of=20
  web pages in which that word appears. Program <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/InvertedIndex.java.html"=
>InvertedIndex.java</A>=20
  takes a list of filenames as command-line inputs, reads in the text =
files,=20
  creates a symbol table of sets, and supports single word queries by =
returning=20
  the set of web pages in which that query word appears.=20
  <LI>Give the preorder traveral of some BST (not including null nodes). =
Ask the=20
  reader to reconstruct the tree.=20
  <LI>Write an ADT <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/IterativeBST.java.html">=
IterativeBST.java</A>=20
  that implements a symbol table using a BST, but uses iterative =
versions of=20
  <TT>get()</TT> and <TT>put()</TT>.=20
  <LI>Largest absolute value.=20
  <LI><B>Tree reconstruction.</B> Given the following traversals of a =
binary=20
  tree (only the elements, not the null nodes), can you can you =
reconstruct the=20
  tree?=20
  <OL>
    <LI>Preorder and inorder.=20
    <LI>Postorder and inorder.=20
    <LI>Level order and inorder.=20
    <LI>Preorder and level order.=20
    <LI>Preorder and postorder. </LI></OL><EM>Answers</EM>=20
  <OL>
    <LI>Yes. Scan the preorder from left to right, and use the inorder =
traversal=20
    to identify the left and right subtrees.=20
    <LI>Yes. Scan the postorder from right to left.=20
    <LI>Yes. Scan the level order from left to right.=20
    <LI>No. Consider two trees with A as the root and B as either the =
left or=20
    right child. The preorder traversal of both is AB and the level =
order=20
    traversal of both is AB.=20
    <LI>No. Same counterexample as above. </LI></OL>
  <LI><B>Highlighting browser hyperlinks.</B> Browsers typically denote=20
  hyperlinks in blue, unless they've already been visited, in which case =
they're=20
  depicted in purple Write a program <TT>HyperLinkColorer.java</TT> that =
reads=20
  in a list of web addresses from standard input and output =
<TT>blue</TT> if=20
  it's the first time reading in that string, and <TT>purple</TT> =
otherwise.=20
  <LI><B>Spam blacklist.</B> Insert known spam email addresses into a <A =

  =
href=3D"http://www.cs.princeton.edu/introcs/44st/SET.java.html">SET.java<=
/A>=20
  ADT, and use to blacklist spam.=20
  <LI><B>Inverted index of a book.</B> Write a program that reads in a =
text file=20
  from standard input and compiles an alphabetical index of which words =
appear=20
  on which lines, as in the following input. Ignore case and puncuation. =

  <BLOCKQUOTE>
    <TABLE>
      <TBODY>
      <TR>
        <TD><PRE>It was the best of times,
it was the worst of times,
it was the age of wisdom,
it was the age of foolishness,

age 3-4
best 1
foolishness 4
it 1-4
of 1-4
the 1-4
times 1-2
was 1-4
wisdom 4
worst 2
</PRE></TD></TR></TBODY></TABLE></BLOCKQUOTE>
  <P><EM>Hint</EM>: create a symbol table whose key is a <TT>String</TT> =
that=20
  represents a word and whose value is a =
<TT>Sequence&lt;Integer&gt;</TT> that=20
  represents the list of pages on which the word appears. </P>
  <LI><B>Randomly generated identities.</B> The files <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/names20k.csv">names20k.c=
sv</A>=20
  and The file <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/names20k-2.csv">names20k=
-2.csv</A>=20
  each contain 20,000 randomly generated identities (number, gender, =
first name,=20
  middle initial, last name, street address, city, state, zip code, =
country,=20
  email address, telephone number, mother's maiden name, birthday, =
credit card=20
  type, credit card number, credit card expiration date, Social security =
number)=20
  from <A=20
  =
href=3D"http://www.fakenamegenerator.com/index.php">fakenamegenerator.com=
</A>.=20
  <LI><B>Distance between zip codes.</B> Write a data type <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/Location.java.html">Loca=
tion.java</A>=20
  that represents a named location on the surface of the earth (a name,=20
  latitude, and longitude). Then, write a client program <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/Postal.java.html">that =
takes=20
  the name of a ZIP code file (such as <A=20
  =
href=3D"http://www.cs.princeton.edu/introcs/44st/zips.txt">zips.txt</A>) =
as a=20
  command-line argument, reads the data from the file, and stores it in =
a symbol=20
  table. Then, repeatedly read in pairs of ZIP codes from standard input =
and=20
  output the great-circle distance between them (in statute miles). This =

  distance is used by the post office to calculate shipping rates.=20
</LI></OL><BR><BR>
<P class=3Dfooter>Copyright =A9 2000=962010 by Robert Sedgewick and =
Kevin Wayne. All=20
rights reserved. </P></DIV>
<SCRIPT type=3Dtext/javascript>=0A=
var gaJsHost =3D (("https:" =3D=3D document.location.protocol) ? =
"https://ssl." : "http://www.");=0A=
document.write(unescape("%3Cscript src=3D'" + gaJsHost + =
"google-analytics.com/ga.js' type=3D'text/javascript'%3E%3C/script%3E"));=0A=
</SCRIPT>

<SCRIPT type=3Dtext/javascript>=0A=
try {=0A=
var pageTracker =3D _gat._getTracker("UA-10811519-1");=0A=
pageTracker._trackPageview();=0A=
} catch(err) {}</SCRIPT>
</BODY></HTML>

------=_NextPart_000_0040_01CB5973.FBF4D9F0
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: http://www.cs.princeton.edu/introcs/cover.jpg

/9j/4AAQSkZJRgABAgEBLAEsAAD/4RPXRXhpZgAATU0AKgAAAAgABwESAAMAAAABAAEAAAEaAAUA
AAABAAAAYgEbAAUAAAABAAAAagEoAAMAAAABAAIAAAExAAIAAAAeAAAAcgEyAAIAAAAUAAAAkIdp
AAQAAAABAAAApAAAANAALcbAAAAnEAAtxsAAACcQQWRvYmUgUGhvdG9zaG9wIENTMiBNYWNpbnRv
c2gAMjAwNzowNDowNSAxMzo0MjozMQAAA6ABAAMAAAAB//8AAKACAAQAAAABAAAAvKADAAQAAAAB
AAAA6QAAAAAAAAAGAQMAAwAAAAEABgAAARoABQAAAAEAAAEeARsABQAAAAEAAAEmASgAAwAAAAEA
AgAAAgEABAAAAAEAAAEuAgIABAAAAAEAABKhAAAAAAAAAEgAAAABAAAASAAAAAH/2P/gABBKRklG
AAECAABIAEgAAP/tAAxBZG9iZV9DTQAC/+4ADkFkb2JlAGSAAAAAAf/bAIQADAgICAkIDAkJDBEL
CgsRFQ8MDA8VGBMTFRMTGBEMDAwMDAwRDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAENCwsN
Dg0QDg4QFA4ODhQUDg4ODhQRDAwMDAwREQwMDAwMDBEMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
DAwM/8AAEQgAoACBAwEiAAIRAQMRAf/dAAQACf/EAT8AAAEFAQEBAQEBAAAAAAAAAAMAAQIEBQYH
CAkKCwEAAQUBAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAABBAEDAgQCBQcGCAUDDDMBAAIRAwQh
EjEFQVFhEyJxgTIGFJGhsUIjJBVSwWIzNHKC0UMHJZJT8OHxY3M1FqKygyZEk1RkRcKjdDYX0lXi
ZfKzhMPTdePzRieUpIW0lcTU5PSltcXV5fVWZnaGlqa2xtbm9jdHV2d3h5ent8fX5/cRAAICAQIE
BAMEBQYHBwYFNQEAAhEDITESBEFRYXEiEwUygZEUobFCI8FS0fAzJGLhcoKSQ1MVY3M08SUGFqKy
gwcmNcLSRJNUoxdkRVU2dGXi8rOEw9N14/NGlKSFtJXE1OT0pbXF1eX1VmZ2hpamtsbW5vYnN0dX
Z3eHl6e3x//aAAwDAQACEQMRAD8AzkkkloNVSSSSSlJJJJKUkkkkpSSSSSlJASYTgePfgJE6QNB3
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
9/8A5NJdFvf+8fvSS+7D978Fe9/V/F//1s8Hx+fn8UiI15HimSBIOnflaDVUkBOicx8jwR/clGkD
UnnsYSUonjwjRWMTJopqtquq9RtxbJ00DQ7tLd30lWdodfAJJUpvHK6UQN2IXENa0fmiG8/Qt/P+
l6n5lf6t+k/nlGrLxA+z1qS6q0Vbqq2tYCa2tbYN272MdZus/wCG/wC69v6RU0kKVboMyOkGsh+O
QWHc1m0+7cW+oG2Cx7vzP0fqfzW/0v8AhHjdkdMNbmtxSx7g4F+rmg/4M+ibfot/0fq/9cVNJKvN
Vs859eRf6mMDj1mC6sw7cdux3u/M3v8A0vs/4tW3ZfTbI9XFdoGMOwge0fztjIe3bkW/S9++v+oq
KSVKtuNzcNmQy5mKAA1wewwQ521jqne8v/m8hn/sP+jUn5PS3BzxjH1BO1ruDJIr37H7HtoqDP8A
R+pYqKSVKtNlWYr7GnFqNNYbBaTJJn6Tnbn7v+ggpJIqUkkkkp//185JJOBOvA8VoNVQgc8dvj4p
jMweU5I+P4BKSRHEdh4JKUZHeNBofh4JS3uJ+GiY9vgEklLy3wP5f/IpSPL7kySSl58x93+xMY7c
/ckkkpSSSSSlJJJJKUkkkkpSSSSSn//QzxHx8/7kxJJ1+SRMpLQaqkvgkkkpd3YjghMnGrY89EyS
lJJJJKUkkkkpSSSSSlJJJJKUkkkkpSSSSSn/2f/tNv5QaG90b3Nob3AgMy4wADhCSU0EBAAAAAAA
BxwCAAACAAIAOEJJTQQlAAAAAAAQRgzyiSa4VtqwnAGhsKeQdzhCSU0D6gAAAAAdsDw/eG1sIHZl
cnNpb249IjEuMCIgZW5jb2Rpbmc9IlVURi04Ij8+CjwhRE9DVFlQRSBwbGlzdCBQVUJMSUMgIi0v
L0FwcGxlIENvbXB1dGVyLy9EVEQgUExJU1QgMS4wLy9FTiIgImh0dHA6Ly93d3cuYXBwbGUuY29t
L0RURHMvUHJvcGVydHlMaXN0LTEuMC5kdGQiPgo8cGxpc3QgdmVyc2lvbj0iMS4wIj4KPGRpY3Q+
Cgk8a2V5PmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0LlBNSG9yaXpvbnRhbFJlczwva2V5PgoJ
PGRpY3Q+CgkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNyZWF0b3I8L2tleT4KCQk8c3Ry
aW5nPmNvbS5hcHBsZS5wcmludGluZ21hbmFnZXI8L3N0cmluZz4KCQk8a2V5PmNvbS5hcHBsZS5w
cmludC50aWNrZXQuaXRlbUFycmF5PC9rZXk+CgkJPGFycmF5PgoJCQk8ZGljdD4KCQkJCTxrZXk+
Y29tLmFwcGxlLnByaW50LlBhZ2VGb3JtYXQuUE1Ib3Jpem9udGFsUmVzPC9rZXk+CgkJCQk8cmVh
bD43MjwvcmVhbD4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jbGllbnQ8L2tleT4K
CQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJPGtleT5j
b20uYXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJCTxkYXRlPjIwMDctMDItMjJU
MTY6NDQ6NDhaPC9kYXRlPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LnN0YXRlRmxh
Zzwva2V5PgoJCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQkJPC9kaWN0PgoJCTwvYXJyYXk+Cgk8
L2RpY3Q+Cgk8a2V5PmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0LlBNT3JpZW50YXRpb248L2tl
eT4KCTxkaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJ
PHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJPGtleT5jb20uYXBw
bGUucHJpbnQudGlja2V0Lml0ZW1BcnJheTwva2V5PgoJCTxhcnJheT4KCQkJPGRpY3Q+CgkJCQk8
a2V5PmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0LlBNT3JpZW50YXRpb248L2tleT4KCQkJCTxp
bnRlZ2VyPjE8L2ludGVnZXI+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY2xpZW50
PC9rZXk+CgkJCQk8c3RyaW5nPmNvbS5hcHBsZS5wcmludGluZ21hbmFnZXI8L3N0cmluZz4KCQkJ
CTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5tb2REYXRlPC9rZXk+CgkJCQk8ZGF0ZT4yMDA3
LTAyLTIyVDE2OjQ0OjQ4WjwvZGF0ZT4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5z
dGF0ZUZsYWc8L2tleT4KCQkJCTxpbnRlZ2VyPjA8L2ludGVnZXI+CgkJCTwvZGljdD4KCQk8L2Fy
cmF5PgoJPC9kaWN0PgoJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1hdC5QTVNjYWxpbmc8
L2tleT4KCTxkaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+
CgkJPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJPGtleT5jb20u
YXBwbGUucHJpbnQudGlja2V0Lml0ZW1BcnJheTwva2V5PgoJCTxhcnJheT4KCQkJPGRpY3Q+CgkJ
CQk8a2V5PmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0LlBNU2NhbGluZzwva2V5PgoJCQkJPHJl
YWw+MTwvcmVhbD4KCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jbGllbnQ8L2tleT4K
CQkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50aW5nbWFuYWdlcjwvc3RyaW5nPgoJCQkJPGtleT5j
b20uYXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJCTxkYXRlPjIwMDctMDItMjJU
MTY6NDQ6NDhaPC9kYXRlPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LnN0YXRlRmxh
Zzwva2V5PgoJCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQkJPC9kaWN0PgoJCTwvYXJyYXk+Cgk8
L2RpY3Q+Cgk8a2V5PmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0LlBNVmVydGljYWxSZXM8L2tl
eT4KCTxkaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJ
PHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJPGtleT5jb20uYXBw
bGUucHJpbnQudGlja2V0Lml0ZW1BcnJheTwva2V5PgoJCTxhcnJheT4KCQkJPGRpY3Q+CgkJCQk8
a2V5PmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0LlBNVmVydGljYWxSZXM8L2tleT4KCQkJCTxy
ZWFsPjcyPC9yZWFsPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNsaWVudDwva2V5
PgoJCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJCQk8a2V5
PmNvbS5hcHBsZS5wcmludC50aWNrZXQubW9kRGF0ZTwva2V5PgoJCQkJPGRhdGU+MjAwNy0wMi0y
MlQxNjo0NDo0OFo8L2RhdGU+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVG
bGFnPC9rZXk+CgkJCQk8aW50ZWdlcj4wPC9pbnRlZ2VyPgoJCQk8L2RpY3Q+CgkJPC9hcnJheT4K
CTwvZGljdD4KCTxrZXk+Y29tLmFwcGxlLnByaW50LlBhZ2VGb3JtYXQuUE1WZXJ0aWNhbFNjYWxp
bmc8L2tleT4KCTxkaWN0PgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jcmVhdG9yPC9r
ZXk+CgkJPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJPGtleT5j
b20uYXBwbGUucHJpbnQudGlja2V0Lml0ZW1BcnJheTwva2V5PgoJCTxhcnJheT4KCQkJPGRpY3Q+
CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC5QYWdlRm9ybWF0LlBNVmVydGljYWxTY2FsaW5nPC9r
ZXk+CgkJCQk8cmVhbD4xPC9yZWFsPgoJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNs
aWVudDwva2V5PgoJCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+
CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQubW9kRGF0ZTwva2V5PgoJCQkJPGRhdGU+
MjAwNy0wMi0yMlQxNjo0NDo0OFo8L2RhdGU+CgkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNr
ZXQuc3RhdGVGbGFnPC9rZXk+CgkJCQk8aW50ZWdlcj4wPC9pbnRlZ2VyPgoJCQk8L2RpY3Q+CgkJ
PC9hcnJheT4KCTwvZGljdD4KCTxrZXk+Y29tLmFwcGxlLnByaW50LnN1YlRpY2tldC5wYXBlcl9p
bmZvX3RpY2tldDwva2V5PgoJPGRpY3Q+CgkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZvcm1h
dC5QTUFkanVzdGVkUGFnZVJlY3Q8L2tleT4KCQk8ZGljdD4KCQkJPGtleT5jb20uYXBwbGUucHJp
bnQudGlja2V0LmNyZWF0b3I8L2tleT4KCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5h
Z2VyPC9zdHJpbmc+CgkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tl
eT4KCQkJPGFycmF5PgoJCQkJPGRpY3Q+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFnZUZv
cm1hdC5QTUFkanVzdGVkUGFnZVJlY3Q8L2tleT4KCQkJCQk8YXJyYXk+CgkJCQkJCTxyZWFsPjAu
MDwvcmVhbD4KCQkJCQkJPHJlYWw+MC4wPC9yZWFsPgoJCQkJCQk8cmVhbD43MzQ8L3JlYWw+CgkJ
CQkJCTxyZWFsPjU3NjwvcmVhbD4KCQkJCQk8L2FycmF5PgoJCQkJCTxrZXk+Y29tLmFwcGxlLnBy
aW50LnRpY2tldC5jbGllbnQ8L2tleT4KCQkJCQk8c3RyaW5nPmNvbS5hcHBsZS5wcmludGluZ21h
bmFnZXI8L3N0cmluZz4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQubW9kRGF0ZTwv
a2V5PgoJCQkJCTxkYXRlPjIwMDctMDQtMDVUMTc6NDE6NDRaPC9kYXRlPgoJCQkJCTxrZXk+Y29t
LmFwcGxlLnByaW50LnRpY2tldC5zdGF0ZUZsYWc8L2tleT4KCQkJCQk8aW50ZWdlcj4wPC9pbnRl
Z2VyPgoJCQkJPC9kaWN0PgoJCQk8L2FycmF5PgoJCTwvZGljdD4KCQk8a2V5PmNvbS5hcHBsZS5w
cmludC5QYWdlRm9ybWF0LlBNQWRqdXN0ZWRQYXBlclJlY3Q8L2tleT4KCQk8ZGljdD4KCQkJPGtl
eT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNyZWF0b3I8L2tleT4KCQkJPHN0cmluZz5jb20uYXBw
bGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tl
dC5pdGVtQXJyYXk8L2tleT4KCQkJPGFycmF5PgoJCQkJPGRpY3Q+CgkJCQkJPGtleT5jb20uYXBw
bGUucHJpbnQuUGFnZUZvcm1hdC5QTUFkanVzdGVkUGFwZXJSZWN0PC9rZXk+CgkJCQkJPGFycmF5
PgoJCQkJCQk8cmVhbD4tMTg8L3JlYWw+CgkJCQkJCTxyZWFsPi0xODwvcmVhbD4KCQkJCQkJPHJl
YWw+Nzc0PC9yZWFsPgoJCQkJCQk8cmVhbD41OTQ8L3JlYWw+CgkJCQkJPC9hcnJheT4KCQkJCQk8
a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+CgkJCQkJPHN0cmluZz5jb20u
YXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQu
dGlja2V0Lm1vZERhdGU8L2tleT4KCQkJCQk8ZGF0ZT4yMDA3LTA0LTA1VDE3OjQxOjQ0WjwvZGF0
ZT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3RhdGVGbGFnPC9rZXk+CgkJCQkJ
PGludGVnZXI+MDwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJPC9hcnJheT4KCQk8L2RpY3Q+CgkJ
PGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLlBNUGFwZXJOYW1lPC9rZXk+CgkJPGRpY3Q+
CgkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJCTxzdHJpbmc+
Y29tLmFwcGxlLnByaW50LnBtLlBvc3RTY3JpcHQ8L3N0cmluZz4KCQkJPGtleT5jb20uYXBwbGUu
cHJpbnQudGlja2V0Lml0ZW1BcnJheTwva2V5PgoJCQk8YXJyYXk+CgkJCQk8ZGljdD4KCQkJCQk8
a2V5PmNvbS5hcHBsZS5wcmludC5QYXBlckluZm8uUE1QYXBlck5hbWU8L2tleT4KCQkJCQk8c3Ry
aW5nPm5hLWxldHRlcjwvc3RyaW5nPgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5j
bGllbnQ8L2tleT4KCQkJCQk8c3RyaW5nPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9z
dHJpbmc+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJ
CQk8ZGF0ZT4yMDAzLTA3LTAxVDE3OjQ5OjM2WjwvZGF0ZT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5w
cmludC50aWNrZXQuc3RhdGVGbGFnPC9rZXk+CgkJCQkJPGludGVnZXI+MTwvaW50ZWdlcj4KCQkJ
CTwvZGljdD4KCQkJPC9hcnJheT4KCQk8L2RpY3Q+CgkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFw
ZXJJbmZvLlBNVW5hZGp1c3RlZFBhZ2VSZWN0PC9rZXk+CgkJPGRpY3Q+CgkJCTxrZXk+Y29tLmFw
cGxlLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJCTxzdHJpbmc+Y29tLmFwcGxlLnByaW50
LnBtLlBvc3RTY3JpcHQ8L3N0cmluZz4KCQkJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0Lml0
ZW1BcnJheTwva2V5PgoJCQk8YXJyYXk+CgkJCQk8ZGljdD4KCQkJCQk8a2V5PmNvbS5hcHBsZS5w
cmludC5QYXBlckluZm8uUE1VbmFkanVzdGVkUGFnZVJlY3Q8L2tleT4KCQkJCQk8YXJyYXk+CgkJ
CQkJCTxyZWFsPjAuMDwvcmVhbD4KCQkJCQkJPHJlYWw+MC4wPC9yZWFsPgoJCQkJCQk8cmVhbD43
MzQ8L3JlYWw+CgkJCQkJCTxyZWFsPjU3NjwvcmVhbD4KCQkJCQk8L2FycmF5PgoJCQkJCTxrZXk+
Y29tLmFwcGxlLnByaW50LnRpY2tldC5jbGllbnQ8L2tleT4KCQkJCQk8c3RyaW5nPmNvbS5hcHBs
ZS5wcmludGluZ21hbmFnZXI8L3N0cmluZz4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNr
ZXQubW9kRGF0ZTwva2V5PgoJCQkJCTxkYXRlPjIwMDctMDItMjJUMTY6NDQ6NDhaPC9kYXRlPgoJ
CQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5zdGF0ZUZsYWc8L2tleT4KCQkJCQk8aW50
ZWdlcj4wPC9pbnRlZ2VyPgoJCQkJPC9kaWN0PgoJCQk8L2FycmF5PgoJCTwvZGljdD4KCQk8a2V5
PmNvbS5hcHBsZS5wcmludC5QYXBlckluZm8uUE1VbmFkanVzdGVkUGFwZXJSZWN0PC9rZXk+CgkJ
PGRpY3Q+CgkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5jcmVhdG9yPC9rZXk+CgkJCTxz
dHJpbmc+Y29tLmFwcGxlLnByaW50LnBtLlBvc3RTY3JpcHQ8L3N0cmluZz4KCQkJPGtleT5jb20u
YXBwbGUucHJpbnQudGlja2V0Lml0ZW1BcnJheTwva2V5PgoJCQk8YXJyYXk+CgkJCQk8ZGljdD4K
CQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC5QYXBlckluZm8uUE1VbmFkanVzdGVkUGFwZXJSZWN0
PC9rZXk+CgkJCQkJPGFycmF5PgoJCQkJCQk8cmVhbD4tMTg8L3JlYWw+CgkJCQkJCTxyZWFsPi0x
ODwvcmVhbD4KCQkJCQkJPHJlYWw+Nzc0PC9yZWFsPgoJCQkJCQk8cmVhbD41OTQ8L3JlYWw+CgkJ
CQkJPC9hcnJheT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY2xpZW50PC9rZXk+
CgkJCQkJPHN0cmluZz5jb20uYXBwbGUucHJpbnRpbmdtYW5hZ2VyPC9zdHJpbmc+CgkJCQkJPGtl
eT5jb20uYXBwbGUucHJpbnQudGlja2V0Lm1vZERhdGU8L2tleT4KCQkJCQk8ZGF0ZT4yMDA3LTAy
LTIyVDE2OjQ0OjQ4WjwvZGF0ZT4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuc3Rh
dGVGbGFnPC9rZXk+CgkJCQkJPGludGVnZXI+MDwvaW50ZWdlcj4KCQkJCTwvZGljdD4KCQkJPC9h
cnJheT4KCQk8L2RpY3Q+CgkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLnBwZC5QTVBh
cGVyTmFtZTwva2V5PgoJCTxkaWN0PgoJCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuY3Jl
YXRvcjwva2V5PgoJCQk8c3RyaW5nPmNvbS5hcHBsZS5wcmludC5wbS5Qb3N0U2NyaXB0PC9zdHJp
bmc+CgkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5pdGVtQXJyYXk8L2tleT4KCQkJPGFy
cmF5PgoJCQkJPGRpY3Q+CgkJCQkJPGtleT5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvLnBwZC5Q
TVBhcGVyTmFtZTwva2V5PgoJCQkJCTxzdHJpbmc+VVMgTGV0dGVyPC9zdHJpbmc+CgkJCQkJPGtl
eT5jb20uYXBwbGUucHJpbnQudGlja2V0LmNsaWVudDwva2V5PgoJCQkJCTxzdHJpbmc+Y29tLmFw
cGxlLnByaW50LnBtLlBvc3RTY3JpcHQ8L3N0cmluZz4KCQkJCQk8a2V5PmNvbS5hcHBsZS5wcmlu
dC50aWNrZXQubW9kRGF0ZTwva2V5PgoJCQkJCTxkYXRlPjIwMDMtMDctMDFUMTc6NDk6MzZaPC9k
YXRlPgoJCQkJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC5zdGF0ZUZsYWc8L2tleT4KCQkJ
CQk8aW50ZWdlcj4xPC9pbnRlZ2VyPgoJCQkJPC9kaWN0PgoJCQk8L2FycmF5PgoJCTwvZGljdD4K
CQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuQVBJVmVyc2lvbjwva2V5PgoJCTxzdHJpbmc+
MDAuMjA8L3N0cmluZz4KCQk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQucHJpdmF0ZUxvY2s8
L2tleT4KCQk8ZmFsc2UvPgoJCTxrZXk+Y29tLmFwcGxlLnByaW50LnRpY2tldC50eXBlPC9rZXk+
CgkJPHN0cmluZz5jb20uYXBwbGUucHJpbnQuUGFwZXJJbmZvVGlja2V0PC9zdHJpbmc+Cgk8L2Rp
Y3Q+Cgk8a2V5PmNvbS5hcHBsZS5wcmludC50aWNrZXQuQVBJVmVyc2lvbjwva2V5PgoJPHN0cmlu
Zz4wMC4yMDwvc3RyaW5nPgoJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LnByaXZhdGVMb2Nr
PC9rZXk+Cgk8ZmFsc2UvPgoJPGtleT5jb20uYXBwbGUucHJpbnQudGlja2V0LnR5cGU8L2tleT4K
CTxzdHJpbmc+Y29tLmFwcGxlLnByaW50LlBhZ2VGb3JtYXRUaWNrZXQ8L3N0cmluZz4KPC9kaWN0
Pgo8L3BsaXN0Pgo4QklNA+kAAAAAAHgAAwAAAEgASAAAAAAC3gJA/+7/7gMGAlIDZwUoA/wAAgAA
AEgASAAAAAAC2AIoAAEAAABkAAAAAQADAwMAAAABf/8AAQABAAAAAAAAAAAAAAAAaAgAGQGQAAAA
AAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4QklNA+0AAAAAABABLAAAAAEAAQEsAAAAAQAB
OEJJTQQmAAAAAAAOAAAAAAAAAAAAAD+AAAA4QklNBA0AAAAAAAQAAAB4OEJJTQQZAAAAAAAEAAAA
HjhCSU0D8wAAAAAACQAAAAAAAAAAAQA4QklNBAoAAAAAAAEAADhCSU0nEAAAAAAACgABAAAAAAAA
AAE4QklNA/UAAAAAAEgAL2ZmAAEAbGZmAAYAAAAAAAEAL2ZmAAEAoZmaAAYAAAAAAAEAMgAAAAEA
WgAAAAYAAAAAAAEANQAAAAEALQAAAAYAAAAAAAE4QklNA/gAAAAAAHAAAP//////////////////
//////////8D6AAAAAD/////////////////////////////A+gAAAAA////////////////////
/////////wPoAAAAAP////////////////////////////8D6AAAOEJJTQQIAAAAAAAfAAAAAQAA
AkAAAAJAAAAAAwAADoQAAAALwAAAAAvtAQA4QklNBB4AAAAAAAQAAAAAOEJJTQQaAAAAAANfAAAA
BgAAAAAAAAAAAAAA6QAAALwAAAAVAHMAZQBkAGcAZQB3AGkAYwBrAF8ANABiAG8AZAB5AF8AaABp
AHIAZQBzAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAC8AAAA6QAAAAAAAAAAAAAA
AAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAABAAAAABAAAAAAAAbnVsbAAAAAIAAAAGYm91bmRzT2Jq
YwAAAAEAAAAAAABSY3QxAAAABAAAAABUb3AgbG9uZwAAAAAAAAAATGVmdGxvbmcAAAAAAAAAAEJ0
b21sb25nAAAA6QAAAABSZ2h0bG9uZwAAALwAAAAGc2xpY2VzVmxMcwAAAAFPYmpjAAAAAQAAAAAA
BXNsaWNlAAAAEgAAAAdzbGljZUlEbG9uZwAAAAAAAAAHZ3JvdXBJRGxvbmcAAAAAAAAABm9yaWdp
bmVudW0AAAAMRVNsaWNlT3JpZ2luAAAADWF1dG9HZW5lcmF0ZWQAAAAAVHlwZWVudW0AAAAKRVNs
aWNlVHlwZQAAAABJbWcgAAAABmJvdW5kc09iamMAAAABAAAAAAAAUmN0MQAAAAQAAAAAVG9wIGxv
bmcAAAAAAAAAAExlZnRsb25nAAAAAAAAAABCdG9tbG9uZwAAAOkAAAAAUmdodGxvbmcAAAC8AAAA
A3VybFRFWFQAAAABAAAAAAAAbnVsbFRFWFQAAAABAAAAAAAATXNnZVRFWFQAAAABAAAAAAAGYWx0
VGFnVEVYVAAAAAEAAAAAAA5jZWxsVGV4dElzSFRNTGJvb2wBAAAACGNlbGxUZXh0VEVYVAAAAAEA
AAAAAAlob3J6QWxpZ25lbnVtAAAAD0VTbGljZUhvcnpBbGlnbgAAAAdkZWZhdWx0AAAACXZlcnRB
bGlnbmVudW0AAAAPRVNsaWNlVmVydEFsaWduAAAAB2RlZmF1bHQAAAALYmdDb2xvclR5cGVlbnVt
AAAAEUVTbGljZUJHQ29sb3JUeXBlAAAAAE5vbmUAAAAJdG9wT3V0c2V0bG9uZwAAAAAAAAAKbGVm
dE91dHNldGxvbmcAAAAAAAAADGJvdHRvbU91dHNldGxvbmcAAAAAAAAAC3JpZ2h0T3V0c2V0bG9u
ZwAAAAAAOEJJTQQoAAAAAAAMAAAAAT/wAAAAAAAAOEJJTQQRAAAAAAABAQA4QklNBBQAAAAAAAQA
AAAuOEJJTQQMAAAAABK9AAAAAQAAAIEAAACgAAABhAAA8oAAABKhABgAAf/Y/+AAEEpGSUYAAQIA
AEgASAAA/+0ADEFkb2JlX0NNAAL/7gAOQWRvYmUAZIAAAAAB/9sAhAAMCAgICQgMCQkMEQsKCxEV
DwwMDxUYExMVExMYEQwMDAwMDBEMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAQ0LCw0ODRAO
DhAUDg4OFBQODg4OFBEMDAwMDBERDAwMDAwMEQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAz/
wAARCACgAIEDASIAAhEBAxEB/90ABAAJ/8QBPwAAAQUBAQEBAQEAAAAAAAAAAwABAgQFBgcICQoL
AQABBQEBAQEBAQAAAAAAAAABAAIDBAUGBwgJCgsQAAEEAQMCBAIFBwYIBQMMMwEAAhEDBCESMQVB
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
AFMAMgAAAAEAOEJJTQQGAAAAAAAHAAgAAAABAQD/4TqYaHR0cDovL25zLmFkb2JlLmNvbS94YXAv
MS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/
Pgo8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSIzLjEuMS0xMTEi
PgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRm
LXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAg
ICAgICB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyI+CiAgICAgICAg
IDxleGlmOkNvbG9yU3BhY2U+LTE8L2V4aWY6Q29sb3JTcGFjZT4KICAgICAgICAgPGV4aWY6UGl4
ZWxYRGltZW5zaW9uPjE4ODwvZXhpZjpQaXhlbFhEaW1lbnNpb24+CiAgICAgICAgIDxleGlmOlBp
eGVsWURpbWVuc2lvbj4yMzM8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpO
YXRpdmVEaWdlc3Q+MzY4NjQsNDA5NjAsNDA5NjEsMzcxMjEsMzcxMjIsNDA5NjIsNDA5NjMsMzc1
MTAsNDA5NjQsMzY4NjcsMzY4NjgsMzM0MzQsMzM0MzcsMzQ4NTAsMzQ4NTIsMzQ4NTUsMzQ4NTYs
MzczNzcsMzczNzgsMzczNzksMzczODAsMzczODEsMzczODIsMzczODMsMzczODQsMzczODUsMzcz
ODYsMzczOTYsNDE0ODMsNDE0ODQsNDE0ODYsNDE0ODcsNDE0ODgsNDE0OTIsNDE0OTMsNDE0OTUs
NDE3MjgsNDE3MjksNDE3MzAsNDE5ODUsNDE5ODYsNDE5ODcsNDE5ODgsNDE5ODksNDE5OTAsNDE5
OTEsNDE5OTIsNDE5OTMsNDE5OTQsNDE5OTUsNDE5OTYsNDIwMTYsMCwyLDQsNSw2LDcsOCw5LDEw
LDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDIwLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDMwOzk2NEU2
OEQzQzQ3OUZEQ0ZBNkQyMThENTgyNjA2NTYxPC9leGlmOk5hdGl2ZURpZ2VzdD4KICAgICAgPC9y
ZGY6RGVzY3JpcHRpb24+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAg
ICAgICAgIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIj4KICAgICAg
ICAgPHRpZmY6T3JpZW50YXRpb24+MTwvdGlmZjpPcmllbnRhdGlvbj4KICAgICAgICAgPHRpZmY6
WFJlc29sdXRpb24+MzAwMDAwMC8xMDAwMDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPHRp
ZmY6WVJlc29sdXRpb24+MzAwMDAwMC8xMDAwMDwvdGlmZjpZUmVzb2x1dGlvbj4KICAgICAgICAg
PHRpZmY6UmVzb2x1dGlvblVuaXQ+MjwvdGlmZjpSZXNvbHV0aW9uVW5pdD4KICAgICAgICAgPHRp
ZmY6TmF0aXZlRGlnZXN0PjI1NiwyNTcsMjU4LDI1OSwyNjIsMjc0LDI3NywyODQsNTMwLDUzMSwy
ODIsMjgzLDI5NiwzMDEsMzE4LDMxOSw1MjksNTMyLDMwNiwyNzAsMjcxLDI3MiwzMDUsMzE1LDMz
NDMyOzI5MTQ1REY1RUY1NTg0QjEzOTdCNEJGREVBNzBGMzIwPC90aWZmOk5hdGl2ZURpZ2VzdD4K
ICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0
PSIiCiAgICAgICAgICAgIHhtbG5zOnhhcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyI+
CiAgICAgICAgIDx4YXA6Q3JlYXRlRGF0ZT4yMDA3LTA0LTA1VDEzOjQyOjMxLTA0OjAwPC94YXA6
Q3JlYXRlRGF0ZT4KICAgICAgICAgPHhhcDpNb2RpZnlEYXRlPjIwMDctMDQtMDVUMTM6NDI6MzEt
MDQ6MDA8L3hhcDpNb2RpZnlEYXRlPgogICAgICAgICA8eGFwOk1ldGFkYXRhRGF0ZT4yMDA3LTA0
LTA1VDEzOjQyOjMxLTA0OjAwPC94YXA6TWV0YWRhdGFEYXRlPgogICAgICAgICA8eGFwOkNyZWF0
b3JUb29sPkFkb2JlIFBob3Rvc2hvcCBDUzIgTWFjaW50b3NoPC94YXA6Q3JlYXRvclRvb2w+CiAg
ICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0i
IgogICAgICAgICAgICB4bWxuczp4YXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21t
LyIKICAgICAgICAgICAgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9z
VHlwZS9SZXNvdXJjZVJlZiMiPgogICAgICAgICA8eGFwTU06RGVyaXZlZEZyb20gcmRmOnBhcnNl
VHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICA8c3RSZWY6aW5zdGFuY2VJRD5hZG9iZTpkb2Np
ZDpwaG90b3Nob3A6ZjllN2U5NmEtYzk2ZS0xMWRiLWIzZWItZDQ2Y2I2YjMwMjVmPC9zdFJlZjpp
bnN0YW5jZUlEPgogICAgICAgICAgICA8c3RSZWY6ZG9jdW1lbnRJRD5hZG9iZTpkb2NpZDpwaG90
b3Nob3A6ZjllN2U5NmEtYzk2ZS0xMWRiLWIzZWItZDQ2Y2I2YjMwMjVmPC9zdFJlZjpkb2N1bWVu
dElEPgogICAgICAgICA8L3hhcE1NOkRlcml2ZWRGcm9tPgogICAgICAgICA8eGFwTU06RG9jdW1l
bnRJRD51dWlkOjdBQzM1QUVGRTUwRDExREJBRkY1RjRBRDA4Mjc5MzhBPC94YXBNTTpEb2N1bWVu
dElEPgogICAgICAgICA8eGFwTU06SW5zdGFuY2VJRD51dWlkOjdBQzM1QUYwRTUwRDExREJBRkY1
RjRBRDA4Mjc5MzhBPC94YXBNTTpJbnN0YW5jZUlEPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4K
ICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6ZGM9
Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIj4KICAgICAgICAgPGRjOmZvcm1hdD5p
bWFnZS9qcGVnPC9kYzpmb3JtYXQ+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICAgICA8cmRm
OkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczpwaG90b3Nob3A9Imh0
dHA6Ly9ucy5hZG9iZS5jb20vcGhvdG9zaG9wLzEuMC8iPgogICAgICAgICA8cGhvdG9zaG9wOkNv
bG9yTW9kZT4zPC9waG90b3Nob3A6Q29sb3JNb2RlPgogICAgICAgICA8cGhvdG9zaG9wOkhpc3Rv
cnkvPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4K
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAK
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAK
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAKPD94cGFja2V0IGVuZD0idyI/Pv/uAA5BZG9iZQBkQAAAAAH/
2wCEAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQECAgICAgICAgIC
AgMDAwMDAwMDAwMBAQEBAQEBAQEBAQICAQICAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMD
AwMDAwMDAwMDAwMDAwMDAwMDA//AABEIAOkAvAMBEQACEQEDEQH/3QAEABj/xAGiAAAABgIDAQAA
AAAAAAAAAAAHCAYFBAkDCgIBAAsBAAAGAwEBAQAAAAAAAAAAAAYFBAMHAggBCQAKCxAAAgEDBAED
AwIDAwMCBgl1AQIDBBEFEgYhBxMiAAgxFEEyIxUJUUIWYSQzF1JxgRhikSVDobHwJjRyChnB0TUn
4VM2gvGSokRUc0VGN0djKFVWVxqywtLi8mSDdJOEZaOzw9PjKThm83UqOTpISUpYWVpnaGlqdnd4
eXqFhoeIiYqUlZaXmJmapKWmp6ipqrS1tre4ubrExcbHyMnK1NXW19jZ2uTl5ufo6er09fb3+Pn6
EQACAQMCBAQDBQQEBAYGBW0BAgMRBCESBTEGACITQVEHMmEUcQhCgSORFVKhYhYzCbEkwdFDcvAX
4YI0JZJTGGNE8aKyJjUZVDZFZCcKc4OTRnTC0uLyVWV1VjeEhaOzw9Pj8ykalKS0xNTk9JWltcXV
5fUoR1dmOHaGlqa2xtbm9md3h5ent8fX5/dIWGh4iJiouMjY6Pg5SVlpeYmZqbnJ2en5KjpKWmp6
ipqqusra6vr/2gAMAwEAAhEDEQA/ACXe80Osd+ve/de697917r3v3Xuve/de697917r3v3Xuve/d
e697917r3v3Xuve/de697917r3v3Xuve/de697917r3v3Xuve/de6lwKsKfeTKrKrFaaJwCJ51td
mU/Wnp7gt+Gay/k2bYlj4S8fM+g/zny9OPp1YYGo/l9v+Yf7HXZp52JnqpRT+QmTy1LMJ5Sx1GSO
FQ1RISTfVpC3/I9+1qOyNa0xQcB9p4f5evaTxY0+3/VXqZLJSyxtUwQfcVMQH3j1QAV72Va2Okib
x2dzaTUzgNZreo2aVZFIR3pGeFP+Okn+VAPSuOrkqRqVat51/wANP8PH16jiomqKWsSWRmVEp5Y4
xZYo9NSkZMcKBYk4n/AHtzQqSRFVyaj+VePHy6rqLK4J/wBVem/271Tr3v3Xuve/de6//9Al3vND
rHfr3v3Xuve/de697917r3v3Xuve/de697917r3v3Xuve/de697917r3v3Xuve/de697917r3v3X
uve/de697317pxpqAun3NY5pKFNDSTEAzyqxssdHASGnlksdJ4QAElrA+2HmofDjGqX08h9p8gP2
+VOrqlRqY0T/AFcPX/B13PXqZL0kIgCKI4ZJLSTxRLfQkVx4qf6kkqC5YklyT78kJApI+quT5An5
+Z/PHy68XzVBT/D/ALH+H59NzMzszuzO7G7O7FnYn6lmYlmP+v7eAAAAFB1Tjk8eucMrwSLKltS3
BVhdHVgVeORf7UciEqw/IPvTKHUqeH+rI+Y62DQgjpwSKMNOYixp6uhqmgudTI8ASpamkP5kgeGx
P9pSrfRvbJYkJq+NXFfzxUfI1/wjq4AGqnwlTT8s06a/b/TfXvfuvde9+691/9El3vNDrHfr3v3X
uve/de697917r3v3Xuve/de697917r3v3Xuve/de697917r3v3Xuve/de697917r3v3XuskUMk7F
Y1uVXU7EhI40H1klkYhI0H9SQP8AY+9MyqKsf9n7B59bALcB1PgSBCfCUkMY1T188ZalplJsPt6d
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
y4TJ01yaYYNgeQxSnl0pMX8lM/iFmipdtYyamyNIsGco8hk8hV0lfIuHp8Sn2MQjhOFoKKbHUVdR
00TP9pXUxdXZJDGGX2WKQgtO1Qe0gAEZrn1JqVJPFTTyr1ddwdOEYoRkEnOKfkBQEDyI6D7ZfaNf
s+gweL/hzZGgwbZeWFYsxW4mqkmyeZ2TuCIxVVPHUCiigyWxaZZUjT/KaWoniJQsrqrubFbl5ZNe
l2p5AjCuvDzw5pXgQDnh0zFcmIIumqrXzpxKn/Co+0E9BpUzvVVNTVSLGslVU1FVIsKCKFZKmZ5n
WGIEiKFWchVHCrYe1qgKqqOAFOk5NST69Yfe+tde97691737r3Xveuvde9+691xdtCM5BOlWaw+p
0gmw/wATb3vr3R0fkd8Jt7fGvqHojuPcu/8AYG68N35iqDLYDB7Uly75zbkOQ2njd3JDuNa+jp6V
ZoqTJpA/hdwJ0a3psfYb2fmW23ncN026G0ljktGIZmppajlO2hrxFc+XRvf7PNt9pZXck8bJOAQF
rUVUNmv29Ew9iPoo697917r3v3XupcP7lNVQ/lAlXEP8YbpOB/rwSFj/AMs/dG7Xjb1wfz4fzH8+
rDKsPz/z9em/dp6eo+roPtJ/66olBpnP/B6f0/68R96Xtd08uI/Pj/PP59bOVDfl/m/1fLqJ7c6p
1//VJd7zQ6x3697917rZ0/lO9Y53ur+WD8wuo9r1mJx+4uyN6dm7NwldnZqqmw1Jks/1RsfH0k+U
noqSuq4aGOacGRo4ZXC3spPHuFefb2LbeduXtwnVjDDFG5C0qQsrk0qQK/mOpG5YtnvOXN2tYyBJ
I7qK8KlFGeOOhm+EPx1k/lK7E747M+WPyE64G2t1YTBfwjrzaudy1bj6qu28MxLLPi8ZuOjwlZnd
5bg/iEVFT01BQszRL+7IygeMt5m3cc+3W12Ww7RN40bNWRlAIDU4lSwVFoWJZuPAeqvZrD+q8N9c
7nfx+GwFEUmlRXgDSrHhQD7fkWLoj4Y/Andv8uLYfyz+QuDquu/BubdW8uw96bfy255dw5/b+N7d
3dh8P1ti8TS5WfG08+4IVx+IRqGhFWyLaJ4pHM6HW6cx81W/OF1sG0SiaqKkaMF0qxiQmQkip09z
dzU9QQKEusto2SXl+Dc79DHRmZmBNSA7AIBWmcLgV9PXpL9N/Gz4Edwj5Q/Pqbq3dWG+F/SOBoMP
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
Y9ZDXVDG8hhlJ+plpaWQn/XZoS3+8+6+Eg4VH2E/5+ra2PGh/IddfdX+tLQt/wBUwX/rW6D3vw/+
GP8At61q/oj9nXvuh+KShH/Thmt/yXKw9+8P/hj/ALf9jr2r+iOumrKgo0askUbizpTxRU4cf6lz
CiM6/wCBJHvwjSoYglh6kn/D17U1CPL5Y6je79V697917r3v3Xuve/de697917r3v3Xuve/de697
917r3v3Xuve/de6//9Al3vNDrHfr3v3XunKkomaL72ZF+3DFYfMwhgqJVNmDyuVH28R/XpuzH0KL
3KsyS0bwlPf50yQPs9T5VwOJ8quKhI1kdv7K/wCx/wAV1jkem8jSyvJXzuS0hXVTU2r6WBKieRFA
sABEAOBx72A9AqgIg/M/5h/PrRK1JJ1H9g/z/wCDrpchVRlTTutKFYOEpkESFl+nkIvJOtjYiRmB
Bt72YY2rrGqvrn9nkPyA61rYfCafZ/qz+fWOpiSyTwLpp6gNZByIJlt5qYn/AJtlgV/rGyn6397j
Y5Vz3r/MeR/z/OvXmH4gMH/VT/V5dcq7mpZv9VFSv/r66WBr/wC8+/RfAB8z/hPXn+L8h/g6ie79
V697917r3v3Xuve/de697917r3v3Xuve/de697917r3v3Xuve/de697917r3v3Xuve/de697917r
3v3Xuve/de697917r//RJpDTyzamQBY0t5JpGEcMd/prkb0gn8KLsfwD7zOZ1WgJyfIcT+X+odY8
BSeHDpwiSipk+4kQ1agkRGUNHFUyrwUp4OHaGM/rllsB9Amo8MsZXOgHSfOnEfafX0A+2tOrgIBq
OR/h+z/KT+zqDVVU9ZKZqh9bWCoqgJFDGOFighQCOGJBwFUAf7G59uxxpEulBj+Z+ZPmeqszOasf
9Xy6j+79V697917qVSspL00rBYqnSNZ/TDULfwTn+iqzFX/2hj/Qe6SAijqO5f5jzH+UfMdWUjKn
gf8AD5H/AFeXXKuR0liWRSjikpldT9VeKMU7qfx6WhI96iIKsVONR/ma/wCXrzggivGg/wA3UP25
1Xr3v3Xuve/de697917r3v3Xuve/de697917r3v3Xuve/de697917r3v3Xuve/de697917r3v3Xu
ve/de697917r3v3Xuv/SKA7ErHNW/wCbC6qOgj/aVla5DaEt9vSn6l/85L+CeWGZQ4ssXxfiY5/4
s/LgP5dY9HNC/DyH+rgP5n+fUGWaSd/JIRewVVVQqRooskcaD0pGg+gH+939uqoQUHVSSTU9Y/e+
tde9+691737r3Xve+vdOtZqqKHH1pYM8cb0NQALMPDNKaaZjf1eSJ9JP9UF+T7Tx0SWaKmCdQ/MC
o/I5/P5dOv3IjedKH/J01e3+muve/de697917r3v3Xuve/de697917r3v3Xuve/de697917r3v3X
uve/de697917r3v3Xuve/de697917r3v3Xuve/de6//TJg7vI7SSMzyOxZ3clmZj9SxPJPvM8AKA
qigHWO9Sck564+99e697917r3v3Xuve/de697917pzpXX7XTKbQ/dNTTn66Iq2FWjmt9f8nnog4/
xFvz7YkB8Sq/FpqPtU8PzDU6cUjTQ8K0P5/5qdN0kbxSPFINMkbsjj+jKSpt/UXHH+Ht8EMAynBH
VCCCQeI64+/da697917r3v3Xuve/de697917r3v3Xuve/de697917r3v3Xuve/de697917r3v3Xu
ve/de697917r3v3Xuve/de6//9Ql3vNDrHfr3v3Xuve/de697917r3v3Xuve/de6kp/wCrf+D0f/
AENP7of7WL/bf5OrD4W/LrJkf+Bkv/BKb/3Eg96h/s1+0/4T1t/i/If4OoXtzqnXvfuvde9+6917
37r3Xvfuvde9+691737r3Xvfuvde9+691737r3Xvfuvde9+691737r3Xvfuvde9+691737r3X//Z

------=_NextPart_000_0040_01CB5973.FBF4D9F0
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://www.cs.princeton.edu/introcs/44st/images/LinkedListST.png

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
CAgy8f8yz+dgAXD40QAAAABJRU5ErkJggg==

------=_NextPart_000_0040_01CB5973.FBF4D9F0
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://www.cs.princeton.edu/introcs/44st/images/BST.png

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

------=_NextPart_000_0040_01CB5973.FBF4D9F0
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://www.cs.princeton.edu/introcs/44st/images/bst-best.png

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
xw3aETYh+yvHttroCA5ZOOVULovNshh9PfjZ/egs7iLepy5rd47+0HbLVwFHPSYhTeOxy5fODEB2
DouUOqWj62ri/zL45ZaDhQ762z3gVi7v07mrHaYxpy53sOkdfTWEENI0tnF+f3SAzhIHB32EEEKT
rI0bre2vDkIIIUJnddjRxX822Hy9tfmLcFT9LLsksfGM8eBkVNnIR1b2H3FWrPZ4duzwvz5U6TYg
pD9x5bjoa8lomj1KShG8996wP4/sCXGxHoZGH7JgPKzZ9w6B9vwd4jJ3mMtchBBP/OOkP9bG2dY+
xm7JIpq+irei74P+miRuAx8hVJBYMs5y2CCERq/bffB4KJt9fas+0nc6FsquDBkWsOL7mzUIIaKx
jtPUu7tqCCGkO2z0s7xyIUKCh4mc0SN0EeI3IUT0tsL5jVyOtOElbYRQg+i3Oo6j15cHDx5ns6Nt
9NEwm50ZbPaJ1XWLJp/gKaVS6YwnmJzaFzv+xy+MPtt3berUCe+ipCcChFB5eslIQ12EEDJ8fZ2X
9h8nZKjX1AhdNQWA/lo7mtoGWevXudijZ5P8zo7VtD7sN2nRhMXu7iOfIeezxyZ8ZeeJFowr5Kz5
90R9hJD+5GWzVji4PHZ8z9nroMskVRcvjY7z4S/X2Tom2HMql3pdMtNESFPboLdcdOQ1/YlrR69e
4JIz6721PgedqE6L9qsHByH0smJt9K7rST0nW5e4NXosk31nv3l82Cmg8d1xrMSdAX+ququjaWlp
P23EdOt3KiwskJW+xY6AWfPsXBxNkof5xlrroJrXG4SQIGdX24/T20vXbp1Of+w4y9nLx2WSqjel
T1PlSfe9w7JlyyTuI/j8Nr9xuaLfCS6XS7RdmMvlt72HXLlypUJr7Nx333137do1WUu02Qq5nD59
+ty5c29UlhxWr15dW1sr+pXP5fIJQsbyrxBcsded33bjPvroo8ePHyu0zE6cOXMmODi448f4kh8Q
EYmPE/F66StXrvznP/9RZJX9BvTXOqTZ5gqMmjr6r/93aurrt/tHqqmv3xdexjZb0XvJXWWbN0JH
R7/3DBW2J2uTJD5OfeRt6uX6wh9kD6uoqNi5c6di2ywtLVVsg50yNjb+5ptvqIv2KEpSUtLp06cV
2GCH+Hz+xx9/rNiLcaalpR06dEiBDXbK3Nx89+7dKSkpCmwzIyNjz549Cmyw/4DzQ9GLFy9qahQ8
+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
0qVLlVaPpO7n2k8//fTrr7/Onz9fcvpPXl5eQkKCkicrBwQE/PLLL9OnT58/f367h8rKyuLi4pRZ
DGX+/PmrV69OS0v74osvJPvtJ06csLa2rqysHDlypHLqmT17tpubW1JS0u7duyUvY/fHH39YWVnx
eDwl74gdPnz4hx9+0NHRYTAY7R6qqam5du2akk+k+/rrr319fblc7tatW9s9xOfzExISZsyY0dzc
rMxrfI4fP/7zzz9nMplbtmyRPDgWExNjYmLS2tqqtHrMzc0PHDhw/vz5devWSc5tvnv3rp6eXnNz
s9Lq6UA3xuR4PN7x48e3bNmSkZEhbZns7GxHR8cvvviipqam24N/cmpsbAwICPjggw9SU1OlLVNU
VLR27dqdO3c+f/68p+uh5OTkbNu27bvvvpPxCvzvf/+ztbW9ePGiEuopKCj47LPPjhw5wmazpS1z
4cKFOXPm/P7770qohyRJoVAYEhKyfv36qKgoactUVlZ+8MEH69atKyoq6ul6WlpawsLCXF1dL1++
LG0ZDoezZ8+elStX5uXl9XQ9lIqKiv3793/++efPnj2TtkxsbKydnd3x48ebm5t7uh42m33kyJHP
PvusoKBA2jKpqanvv/++t7e3co5jSOpyriUnJ2/atCkwMJDP58tesqmp6YcffrCzs7t+/Xp3y+vc
vXv3tm3b9vPPP9fX18teUigU/ve//507d+7Vq1d7rh6SJBsaGvz9/d3c3NLS0jpduKCggMFgbN++
vaqqqofqEQgEZ86ccXd3T05O7nThsrKyzZs3u7m5lZeX91A9lLy8vI8++uj//u//qqurO134/Pnz
tra2Z86caW1t7aF6nj175unp+c0338jzRkRGRs6ZM+fXX3/t0QPZQqHw4sWL69evDwsL63TDX7x4
8emnn65YseLBgwc9V9LVq1ddXV0vXLggFAplL8nj8b7++msHB4esrKyeq0eaLuQam80+fPiwh4eH
jKPgku7fv79kyZJ9+/bV1dV1vTxZ6urqjh8/vnPnzuzsbPnXevjw4YoVKzw9PXuoI5mamrp58+af
f/65oaFBzlVaWlp++eWX2bNnh4WFKbyef/75Z+fOncePH+dyuXKu0traGhQUNGfOHCaTqfB6SJJs
bGz89ddfXV1dU1JS5F+rrKzMzc1t48aNMrot3dPc3Hzu3LnNmzd36R/w8+fPt2/fvm7duidPnii2
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
AwCom/8HeRtpyezY1q0AAAAASUVORK5CYII=

------=_NextPart_000_0040_01CB5973.FBF4D9F0
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://www.cs.princeton.edu/introcs/44st/images/bst-average.png

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
AAAAAElFTkSuQmCC

------=_NextPart_000_0040_01CB5973.FBF4D9F0
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://www.cs.princeton.edu/introcs/44st/images/bst-worst.png

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
AAAAAElFTkSuQmCC

------=_NextPart_000_0040_01CB5973.FBF4D9F0
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: http://www.cs.princeton.edu/introcs/44st/images/set-api.png

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
+jevAwAAAABJRU5ErkJggg==

------=_NextPart_000_0040_01CB5973.FBF4D9F0
Content-Type: text/css;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.cs.princeton.edu/introcs/introcs.css

BODY {
	PADDING-BOTTOM: 0px; LINE-HEIGHT: 130%; BACKGROUND-COLOR: #ffffff; =
MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; FONT-FAMILY: =
Verdana, arial, helvetica, sans-serif; COLOR: #221e1f; FONT-SIZE: 13px; =
PADDING-TOP: 0px
}
P {
	MARGIN-TOP: 10px; FONT-FAMILY: Verdana, arial, helvetica, sans-serif; =
MARGIN-BOTTOM: 0px; FONT-SIZE: 13px
}
P.footer {
	FONT-FAMILY: Arial, Helvetica, sans-serif; FONT-SIZE: 11px
}
A.footer {
	FONT-FAMILY: Arial, Helvetica, sans-serif; FONT-SIZE: 11px
}
P.blurb {
	LINE-HEIGHT: 125%; FONT-STYLE: italic; FONT-SIZE: 12px
}
LI {
	MARGIN-TOP: 6px; FONT-SIZE: 13px
}
HR {
	HEIGHT: 1px; COLOR: #444444
}
CODE {
	FONT-FAMILY: "courier new", courier, mono; FONT-SIZE: 14px
}
TT {
	FONT-FAMILY: "courier new", courier, mono; FONT-SIZE: 14px
}
BLOCKQUOTE {
	MARGIN-LEFT: 40px; MARGIN-RIGHT: 0px
}
BLOCKQUOTE PRE {
	PADDING-BOTTOM: 10px; BACKGROUND-COLOR: #ebebeb; PADDING-LEFT: 15px; =
PADDING-RIGHT: 15px; FONT-FAMILY: "courier new", courier, mono; =
FONT-SIZE: 13px; PADDING-TOP: 10px
}
BLOCKQUOTE PRE.small {
	BACKGROUND-COLOR: #ebebeb; FONT-FAMILY: "courier new", courier, mono; =
FONT-SIZE: 11px
}
BLOCKQUOTE PRE.tiny {
	BACKGROUND-COLOR: #ebebeb; FONT-FAMILY: "courier new", courier, mono; =
FONT-SIZE: 10px
}
PRE {
	PADDING-BOTTOM: 10px; BACKGROUND-COLOR: #ebebeb; PADDING-LEFT: 15px; =
PADDING-RIGHT: 10px; FONT-FAMILY: "courier new", courier, mono; =
MARGIN-LEFT: 0px; FONT-SIZE: 13px; PADDING-TOP: 10px
}
EM {
	FONT-STYLE: italic
}
TH {
	BACKGROUND-COLOR: #666666; FONT-FAMILY: verdana, arial, helvetica, =
sans-serif; COLOR: #ffffff; FONT-SIZE: 12px; FONT-WEIGHT: bold
}
TD {
	MARGIN-TOP: 20px; FONT-FAMILY: verdana, arial, helvetica, sans-serif; =
FONT-SIZE: 12px
}
TD TT {
	FONT-FAMILY: "courier new", courier, mono; FONT-SIZE: 13px
}
H1 {
	TEXT-ALIGN: left; PADDING-BOTTOM: 10px; BACKGROUND-COLOR: #4e6994; =
FONT-VARIANT: small-caps; PADDING-LEFT: 20px; PADDING-RIGHT: 15px; =
COLOR: #ffffff; FONT-SIZE: 20px; FONT-WEIGHT: normal; PADDING-TOP: 10px
}
H1.center {
	TEXT-ALIGN: center
}
H2 {
	TEXT-ALIGN: left; DISPLAY: inline; FONT-SIZE: 13px; FONT-WEIGHT: bold
}
H3 {
	DISPLAY: inline; FONT-SIZE: 13px; FONT-WEIGHT: bold
}
H4 {
	COLOR: #7c927b; FONT-SIZE: 22px; FONT-WEIGHT: bold
}
H4 A {
	COLOR: #7c927b; FONT-SIZE: 22px; FONT-WEIGHT: bold
}
OL LI {
	LIST-STYLE-TYPE: decimal
}
OL OL LI {
	LIST-STYLE-TYPE: lower-alpha
}
OL OL OL LI {
	LIST-STYLE-TYPE: lower-roman
}
OL LI.qa {
	LIST-STYLE-TYPE: upper-alpha
}
UL LI {
	LIST-STYLE-TYPE: disc
}
UL UL LI {
	LIST-STYLE-TYPE: circle
}
UL UL UL LI {
	LIST-STYLE-TYPE: square
}
UL UL UL UL LI {
	LIST-STYLE-TYPE: disc
}
A {
	FONT-FAMILY: verdana, arial, helvetica, sans-serif; TEXT-DECORATION: =
none
}
A:link {
	COLOR: #0b5fb9
}
A:hover {
	COLOR: #aa3e3b; TEXT-DECORATION: underline
}
INPUT.search {
	FONT-FAMILY: Verdana, arial, helvetica, sans-serif; FONT-SIZE: 12px; =
FONT-WEIGHT: normal
}
#content {
	PADDING-BOTTOM: 0cm; PADDING-LEFT: 0.5cm; PADDING-RIGHT: 1cm; =
MARGIN-LEFT: 202px; PADDING-TOP: 0cm
}
#menu A.picture {
	PADDING-BOTTOM: 0px; BORDER-RIGHT-WIDTH: 0px; PADDING-LEFT: 0px; =
PADDING-RIGHT: 0px; BACKGROUND: #000; BORDER-TOP-WIDTH: 0px; =
BORDER-BOTTOM-WIDTH: 0px; COLOR: #fff; FONT-SIZE: 12px; =
BORDER-LEFT-WIDTH: 0px; TEXT-DECORATION: none; PADDING-TOP: 0px
}
#menu {
	WIDTH: 188px; BACKGROUND: #000; FLOAT: left
}
#menu UL {
	PADDING-BOTTOM: 0px; LIST-STYLE-TYPE: none; MARGIN: 0px; PADDING-LEFT: =
0px; PADDING-RIGHT: 0px; LIST-STYLE-IMAGE: none; PADDING-TOP: 0px
}
#menu UL LI {
	LIST-STYLE-TYPE: none; LIST-STYLE-IMAGE: none
}
#menu UL UL LI {
	LIST-STYLE-TYPE: none; LIST-STYLE-IMAGE: none
}
#menu UL UL UL LI {
	LIST-STYLE-TYPE: none; LIST-STYLE-IMAGE: none
}
#menu UL UL UL UL LI {
	LIST-STYLE-TYPE: none; LIST-STYLE-IMAGE: none
}
#menu LI {
	MARGIN: 0px
}
#menu A {
	BORDER-BOTTOM: #555 1px solid; BORDER-LEFT: #bbb 1px solid; =
PADDING-BOTTOM: 2px; MARGIN: 0px; PADDING-LEFT: 10px; PADDING-RIGHT: =
10px; DISPLAY: block; FONT: bold 12px/18px arial, helvetica, sans-serif; =
BORDER-TOP: #ccc 1px solid; BORDER-RIGHT: #888 1px solid; PADDING-TOP: =
2px
}
#menu H2 {
	BORDER-BOTTOM: #555 1px solid; BORDER-LEFT: #bbb 1px solid; =
PADDING-BOTTOM: 2px; MARGIN: 0px; PADDING-LEFT: 10px; PADDING-RIGHT: =
10px; DISPLAY: block; FONT: bold 12px/18px arial, helvetica, sans-serif; =
BORDER-TOP: #ccc 1px solid; BORDER-RIGHT: #888 1px solid; PADDING-TOP: =
2px
}
#menu H2 {
	BORDER-RIGHT-WIDTH: 0px; BACKGROUND: #000; BORDER-TOP-WIDTH: 0px; =
BORDER-BOTTOM-WIDTH: 0px; COLOR: #fff; BORDER-LEFT-WIDTH: 0px
}
#menu A {
	BACKGROUND: #cccccc; COLOR: #000; TEXT-DECORATION: none
}
#menu A.title {
	FONT-VARIANT: small-caps; BACKGROUND: #000; COLOR: #fff; FONT-SIZE: =
105%
}
#menu A:hover {
	BACKGROUND: #7c927b; COLOR: #fff
}
#menu UL UL A:hover {
	BACKGROUND: #896e81; COLOR: #fff
}
#menu UL UL UL A:hover {
	BACKGROUND: #907669; COLOR: #fff
}
#menu UL UL UL {
	POSITION: absolute; TOP: 0px; LEFT: 0px
}
#menu LI {
	POSITION: relative
}
#menu UL UL UL {
	POSITION: absolute; WIDTH: 100%; TOP: 0px; LEFT: 100%
}
DIV#menu UL UL UL {
	DISPLAY: none
}
DIV#menu UL UL LI:hover UL {
	DISPLAY: block
}
DIV#menu UL UL UL {
	DISPLAY: none
}
DIV#menu UL UL LI:hover UL UL {
	DISPLAY: none
}
DIV#menu UL UL LI:hover UL {
	DISPLAY: block
}
DIV#menu UL UL UL {
	DISPLAY: none
}
DIV#menu UL UL LI:hover UL UL {
	DISPLAY: none
}
DIV#menu UL UL LI:hover UL {
	DISPLAY: block
}
DIV#menu UL UL UL LI:hover UL {
	DISPLAY: block
}

------=_NextPart_000_0040_01CB5973.FBF4D9F0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.cs.princeton.edu/algs4/media/swfobject.js

/**=0A=
 * SWFObject v1.5: Flash Player detection and embed - =
http://blog.deconcept.com/swfobject/=0A=
 *=0A=
 * SWFObject is (c) 2007 Geoff Stearns and is released under the MIT =
License:=0A=
 * http://www.opensource.org/licenses/mit-license.php=0A=
 *=0A=
 */=0A=
if(typeof deconcept=3D=3D"undefined"){var deconcept=3Dnew =
Object();}if(typeof =
deconcept.util=3D=3D"undefined"){deconcept.util=3Dnew =
Object();}if(typeof =
deconcept.SWFObjectUtil=3D=3D"undefined"){deconcept.SWFObjectUtil=3Dnew =
Object();}deconcept.SWFObject=3Dfunction(_1,id,w,h,_5,c,_7,_8,_9,_a){if(!=
document.getElementById){return;}this.DETECT_KEY=3D_a?_a:"detectflash";th=
is.skipDetect=3Ddeconcept.util.getRequestParameter(this.DETECT_KEY);this.=
params=3Dnew Object();this.variables=3Dnew =
Object();this.attributes=3Dnew =
Array();if(_1){this.setAttribute("swf",_1);}if(id){this.setAttribute("id"=
,id);}if(w){this.setAttribute("width",w);}if(h){this.setAttribute("height=
",h);}if(_5){this.setAttribute("version",new =
deconcept.PlayerVersion(_5.toString().split(".")));}this.installedVer=3Dd=
econcept.SWFObjectUtil.getPlayerVersion();if(!window.opera&&document.all&=
&this.installedVer.major>7){deconcept.SWFObject.doPrepUnload=3Dtrue;}if(c=
){this.addParam("bgcolor",c);}var =
q=3D_7?_7:"high";this.addParam("quality",q);this.setAttribute("useExpress=
Install",false);this.setAttribute("doExpressInstall",false);var =
_c=3D(_8)?_8:window.location;this.setAttribute("xiRedirectUrl",_c);this.s=
etAttribute("redirectUrl","");if(_9){this.setAttribute("redirectUrl",_9);=
}};deconcept.SWFObject.prototype=3D{useExpressInstall:function(_d){this.x=
iSWFPath=3D!_d?"expressinstall.swf":_d;this.setAttribute("useExpressInsta=
ll",true);},setAttribute:function(_e,_f){this.attributes[_e]=3D_f;},getAt=
tribute:function(_10){return =
this.attributes[_10];},addParam:function(_11,_12){this.params[_11]=3D_12;=
},getParams:function(){return =
this.params;},addVariable:function(_13,_14){this.variables[_13]=3D_14;},g=
etVariable:function(_15){return =
this.variables[_15];},getVariables:function(){return =
this.variables;},getVariablePairs:function(){var _16=3Dnew Array();var =
key;var _18=3Dthis.getVariables();for(key in =
_18){_16[_16.length]=3Dkey+"=3D"+_18[key];}return =
_16;},getSWFHTML:function(){var =
_19=3D"";if(navigator.plugins&&navigator.mimeTypes&&navigator.mimeTypes.l=
ength){if(this.getAttribute("doExpressInstall")){this.addVariable("MMplay=
erType","PlugIn");this.setAttribute("swf",this.xiSWFPath);}_19=3D"<embed =
type=3D\"application/x-shockwave-flash\" =
src=3D\""+this.getAttribute("swf")+"\" =
width=3D\""+this.getAttribute("width")+"\" =
height=3D\""+this.getAttribute("height")+"\" =
style=3D\""+this.getAttribute("style")+"\"";_19+=3D" =
id=3D\""+this.getAttribute("id")+"\" =
name=3D\""+this.getAttribute("id")+"\" ";var =
_1a=3Dthis.getParams();for(var key in =
_1a){_19+=3D[key]+"=3D\""+_1a[key]+"\" ";}var =
_1c=3Dthis.getVariablePairs().join("&");if(_1c.length>0){_19+=3D"flashvar=
s=3D\""+_1c+"\"";}_19+=3D"/>";}else{if(this.getAttribute("doExpressInstal=
l")){this.addVariable("MMplayerType","ActiveX");this.setAttribute("swf",t=
his.xiSWFPath);}_19=3D"<object id=3D\""+this.getAttribute("id")+"\" =
classid=3D\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\" =
width=3D\""+this.getAttribute("width")+"\" =
height=3D\""+this.getAttribute("height")+"\" =
style=3D\""+this.getAttribute("style")+"\">";_19+=3D"<param =
name=3D\"movie\" value=3D\""+this.getAttribute("swf")+"\" />";var =
_1d=3Dthis.getParams();for(var key in _1d){_19+=3D"<param =
name=3D\""+key+"\" value=3D\""+_1d[key]+"\" />";}var =
_1f=3Dthis.getVariablePairs().join("&");if(_1f.length>0){_19+=3D"<param =
name=3D\"flashvars\" value=3D\""+_1f+"\" />";}_19+=3D"</object>";}return =
_19;},write:function(_20){if(this.getAttribute("useExpressInstall")){var =
_21=3Dnew =
deconcept.PlayerVersion([6,0,65]);if(this.installedVer.versionIsValid(_21=
)&&!this.installedVer.versionIsValid(this.getAttribute("version"))){this.=
setAttribute("doExpressInstall",true);this.addVariable("MMredirectURL",es=
cape(this.getAttribute("xiRedirectUrl")));document.title=3Ddocument.title=
.slice(0,47)+" - Flash Player =
Installation";this.addVariable("MMdoctitle",document.title);}}if(this.ski=
pDetect||this.getAttribute("doExpressInstall")||this.installedVer.version=
IsValid(this.getAttribute("version"))){var n=3D(typeof =
_20=3D=3D"string")?document.getElementById(_20):_20;n.innerHTML=3Dthis.ge=
tSWFHTML();return =
true;}else{if(this.getAttribute("redirectUrl")!=3D""){document.location.r=
eplace(this.getAttribute("redirectUrl"));}}return =
false;}};deconcept.SWFObjectUtil.getPlayerVersion=3Dfunction(){var =
_23=3Dnew =
deconcept.PlayerVersion([0,0,0]);if(navigator.plugins&&navigator.mimeType=
s.length){var x=3Dnavigator.plugins["Shockwave =
Flash"];if(x&&x.description){_23=3Dnew =
deconcept.PlayerVersion(x.description.replace(/([a-zA-Z]|\s)+/,"").replac=
e(/(\s+r|\s+b[0-9]+)/,".").split("."));}}else{if(navigator.userAgent&&nav=
igator.userAgent.indexOf("Windows CE")>=3D0){var axo=3D1;var =
_26=3D3;while(axo){try{_26++;axo=3Dnew =
ActiveXObject("ShockwaveFlash.ShockwaveFlash."+_26);_23=3Dnew =
deconcept.PlayerVersion([_26,0,0]);}catch(e){axo=3Dnull;}}}else{try{var =
axo=3Dnew =
ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");}catch(e){try{var =
axo=3Dnew ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");_23=3Dnew =
deconcept.PlayerVersion([6,0,21]);axo.AllowScriptAccess=3D"always";}catch=
(e){if(_23.major=3D=3D6){return _23;}}try{axo=3Dnew =
ActiveXObject("ShockwaveFlash.ShockwaveFlash");}catch(e){}}if(axo!=3Dnull=
){_23=3Dnew deconcept.PlayerVersion(axo.GetVariable("$version").split(" =
")[1].split(","));}}}return =
_23;};deconcept.PlayerVersion=3Dfunction(_29){this.major=3D_29[0]!=3Dnull=
?parseInt(_29[0]):0;this.minor=3D_29[1]!=3Dnull?parseInt(_29[1]):0;this.r=
ev=3D_29[2]!=3Dnull?parseInt(_29[2]):0;};deconcept.PlayerVersion.prototyp=
e.versionIsValid=3Dfunction(fv){if(this.major<fv.major){return =
false;}if(this.major>fv.major){return =
true;}if(this.minor<fv.minor){return =
false;}if(this.minor>fv.minor){return true;}if(this.rev<fv.rev){return =
false;}return =
true;};deconcept.util=3D{getRequestParameter:function(_2b){var =
q=3Ddocument.location.search||document.location.hash;if(_2b=3D=3Dnull){re=
turn q;}if(q){var _2d=3Dq.substring(1).split("&");for(var =
i=3D0;i<_2d.length;i++){if(_2d[i].substring(0,_2d[i].indexOf("=3D"))=3D=3D=
_2b){return _2d[i].substring((_2d[i].indexOf("=3D")+1));}}}return =
"";}};deconcept.SWFObjectUtil.cleanupSWFs=3Dfunction(){var =
_2f=3Ddocument.getElementsByTagName("OBJECT");for(var =
i=3D_2f.length-1;i>=3D0;i--){_2f[i].style.display=3D"none";for(var x in =
_2f[i]){if(typeof =
_2f[i][x]=3D=3D"function"){_2f[i][x]=3Dfunction(){};}}}};if(deconcept.SWF=
Object.doPrepUnload){if(!deconcept.unloadSet){deconcept.SWFObjectUtil.pre=
pUnload=3Dfunction(){__flash_unloadHandler=3Dfunction(){};__flash_savedUn=
loadHandler=3Dfunction(){};window.attachEvent("onunload",deconcept.SWFObj=
ectUtil.cleanupSWFs);};window.attachEvent("onbeforeunload",deconcept.SWFO=
bjectUtil.prepUnload);deconcept.unloadSet=3Dtrue;}}if(!document.getElemen=
tById&&document.all){document.getElementById=3Dfunction(id){return =
document.all[id];};}var =
getQueryParamValue=3Ddeconcept.util.getRequestParameter;var =
FlashObject=3Ddeconcept.SWFObject;var SWFObject=3Ddeconcept.SWFObject;
------=_NextPart_000_0040_01CB5973.FBF4D9F0--
